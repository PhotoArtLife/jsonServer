{"name":"test4","url":"test4","apiInfo":"","detail":"{\nsuccess: true,\ndata: - [\n- {\nid: \"581b0c4ebb9452c9052e7acb\",\nauthor_id: \"5110f2bedf9e9fcc584e4677\",\ntab: \"share\",\ncontent: \"<div class=\"markdown-text\"><p>GitHub: <a href=\"https://github.com/nswbmw/N-blog\">https://github.com/nswbmw/N-blog</a></p> <h2>目录</h2> <ul> <li>开发环境搭建 <ul> <li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/1.1%20Node.js%20%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8.md\">Node.js 的安装与使用</a> <ul> <li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/1.1%20Node.js%20%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8.md#111-%E5%AE%89%E8%A3%85-nodejs\">安装 Node.js</a></li> <li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/1.1%20Node.js%20%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8.md#112-n-%E5%92%8C-nvm\">n 和 nvm</a></li> <li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/1.1%20Node.js%20%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8.md#113-nrm\">nrm</a></li> </ul> </li> <li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/1.2%20MongoDB%20%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8.md\">MongoDB 的安装与使用</a> <ul> <li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/1.2%20MongoDB%20%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8.md#121-%E5%AE%89%E8%A3%85%E4%B8%8E%E5%90%AF%E5%8A%A8-mongodb\">安装与启动 MongoDB</a></li> <li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/1.2%20MongoDB%20%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8.md#122-robomongo-%E5%92%8C-mongochef\">Robomongo 和 MongoChef</a></li> </ul> </li> </ul> </li> <li>Node.js 知识点讲解 <ul> <li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/2.1%20require.md\">require</a></li> <li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/2.2%20exports%20%E5%92%8C%20module.exports.md\">exports 和 module.exports</a></li> <li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/2.3%20Promise.md\">Promise</a></li> <li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/2.4%20%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F.md\">环境变量</a></li> <li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/2.5%20package.json.md\">packge.json</a> <ul> <li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/2.5%20package.json.md#251-semver\">semver</a></li> </ul> </li> <li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/2.6%20npm%20%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9.md\">npm 使用注意事项</a> <ul> <li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/2.6%20npm%20%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9.md#261-npm-init\">npm init</a></li> <li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/2.6%20npm%20%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9.md#262-npm-install\">npm install</a></li> <li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/2.6%20npm%20%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9.md#263-npm-scripts\">npm scripts</a></li> <li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/2.6%20npm%20%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9.md#264-npm-shrinkwrap\">npm shrinkwrap </a></li> </ul> </li> </ul> </li> <li>Hello, Express <ul> <li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/3.1%20%E5%88%9D%E5%A7%8B%E5%8C%96%E4%B8%80%E4%B8%AA%20Express%20%E9%A1%B9%E7%9B%AE.md\">初始化一个 Express 项目</a> <ul> <li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/3.1%20%E5%88%9D%E5%A7%8B%E5%8C%96%E4%B8%80%E4%B8%AA%20Express%20%E9%A1%B9%E7%9B%AE.md#311-supervisor\">supervisor</a></li> </ul> </li> <li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/3.2%20%E8%B7%AF%E7%94%B1.md\">路由</a> <ul> <li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/3.2%20%E8%B7%AF%E7%94%B1.md#321-expressrouter\">express.Router</a></li> </ul> </li> <li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/3.3%20%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E.md\">模板引擎</a> <ul> <li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/3.3%20%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E.md#331-ejs\">ejs</a></li> <li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/3.3%20%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E.md#332-includes\">includes</a></li> </ul> </li> <li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/3.4%20Express%20%E6%B5%85%E6%9E%90.md\">Express 浅析</a> <ul> <li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/3.4%20Express%20%E6%B5%85%E6%9E%90.md#341-%E4%B8%AD%E9%97%B4%E4%BB%B6%E4%B8%8E-next\">中间件与 next</a></li> <li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/3.4%20Express%20%E6%B5%85%E6%9E%90.md#342-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86\">错误处理</a></li> </ul> </li> </ul> </li> <li>一个简单的博客 <ul> <li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/4.1%20%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83.md\">开发环境</a></li> <li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/4.2%20%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C.md\">准备工作</a> <ul> <li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/4.2%20%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C.md#421-%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84\">目录结构</a></li> <li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/4.2%20%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C.md#422-%E5%AE%89%E8%A3%85%E4%BE%9D%E8%B5%96%E6%A8%A1%E5%9D%97\">安装依赖模块</a></li> </ul> </li> <li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/4.3%20%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.md\">配置文件</a> <ul> <li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/4.3%20%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.md#431-config-lite\">config-lite</a></li> </ul> </li> <li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/4.4%20%E5%8A%9F%E8%83%BD%E8%AE%BE%E8%AE%A1.md\">功能设计</a> <ul> <li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/4.4%20%E5%8A%9F%E8%83%BD%E8%AE%BE%E8%AE%A1.md#441-%E5%8A%9F%E8%83%BD%E4%B8%8E%E8%B7%AF%E7%94%B1%E8%AE%BE%E8%AE%A1\">功能与路由设计</a></li> <li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/4.4%20%E5%8A%9F%E8%83%BD%E8%AE%BE%E8%AE%A1.md#442-%E4%BC%9A%E8%AF%9D\">会话</a></li> <li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/4.4%20%E5%8A%9F%E8%83%BD%E8%AE%BE%E8%AE%A1.md#443-%E9%A1%B5%E9%9D%A2%E9%80%9A%E7%9F%A5\">页面通知</a></li> <li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/4.4%20%E5%8A%9F%E8%83%BD%E8%AE%BE%E8%AE%A1.md#444-%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6\">权限控制</a></li> </ul> </li> <li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/4.5%20%E9%A1%B5%E9%9D%A2%E8%AE%BE%E8%AE%A1.md\">页面设计</a> <ul> <li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/4.5%20%E9%A1%B5%E9%9D%A2%E8%AE%BE%E8%AE%A1.md#451-%E7%BB%84%E4%BB%B6\">组件</a></li> <li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/4.5%20%E9%A1%B5%E9%9D%A2%E8%AE%BE%E8%AE%A1.md#452-applocals-%E5%92%8C-reslocals\">app.locals 和 res.locals</a></li> </ul> </li> <li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/4.6%20%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93.md\">连接数据库</a> <ul> <li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/4.6%20%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93.md#461-%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%BF%E7%94%A8-mongolass\">为什么使用 Mongolass</a></li> </ul> </li> <li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/4.7%20%E6%B3%A8%E5%86%8C.md\">注册</a> <ul> <li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/4.7%20%E6%B3%A8%E5%86%8C.md#471-%E7%94%A8%E6%88%B7%E6%A8%A1%E5%9E%8B%E8%AE%BE%E8%AE%A1\">用户模型设计</a></li> <li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/4.7%20%E6%B3%A8%E5%86%8C.md#472-%E6%B3%A8%E5%86%8C%E9%A1%B5\">注册页</a></li> <li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/4.7%20%E6%B3%A8%E5%86%8C.md#473-%E6%B3%A8%E5%86%8C%E4%B8%8E%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0\">注册与文件上传</a></li> </ul> </li> <li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/4.8%20%E7%99%BB%E5%87%BA%E4%B8%8E%E7%99%BB%E5%BD%95.md\">登出与登录</a> <ul> <li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/4.8%20%E7%99%BB%E5%87%BA%E4%B8%8E%E7%99%BB%E5%BD%95.md#481-%E7%99%BB%E5%87%BA\">登出</a></li> <li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/4.8%20%E7%99%BB%E5%87%BA%E4%B8%8E%E7%99%BB%E5%BD%95.md#482-%E7%99%BB%E5%BD%95%E9%A1%B5\">登录页</a></li> <li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/4.8%20%E7%99%BB%E5%87%BA%E4%B8%8E%E7%99%BB%E5%BD%95.md#483-%E7%99%BB%E5%BD%95\">登录</a></li> </ul> </li> <li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/4.9%20%E6%96%87%E7%AB%A0.md\">文章</a> <ul> <li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/4.9%20%E6%96%87%E7%AB%A0.md#491-%E6%96%87%E7%AB%A0%E6%A8%A1%E5%9E%8B%E8%AE%BE%E8%AE%A1\">文章模型设计</a></li> <li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/4.9%20%E6%96%87%E7%AB%A0.md#492-%E5%8F%91%E8%A1%A8%E6%96%87%E7%AB%A0\">发表文章</a></li> <li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/4.9%20%E6%96%87%E7%AB%A0.md#493-%E4%B8%BB%E9%A1%B5%E4%B8%8E%E6%96%87%E7%AB%A0%E9%A1%B5\">主页与文章页</a></li> <li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/4.9%20%E6%96%87%E7%AB%A0.md#494-%E7%BC%96%E8%BE%91%E4%B8%8E%E5%88%A0%E9%99%A4%E6%96%87%E7%AB%A0\">编辑与删除文章</a></li> </ul> </li> <li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/4.10%20%E7%95%99%E8%A8%80.md\">留言</a> <ul> <li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/4.10%20%E7%95%99%E8%A8%80.md#4101-%E7%95%99%E8%A8%80%E6%A8%A1%E5%9E%8B%E8%AE%BE%E8%AE%A1\">留言模型设计</a></li> <li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/4.10%20%E7%95%99%E8%A8%80.md#4102-%E6%98%BE%E7%A4%BA%E7%95%99%E8%A8%80\">显示留言</a></li> <li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/4.10%20%E7%95%99%E8%A8%80.md#4103-%E5%8F%91%E8%A1%A8%E4%B8%8E%E5%88%A0%E9%99%A4%E7%95%99%E8%A8%80\">发表与删除留言</a></li> </ul> </li> <li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/4.11%20404%20%E9%A1%B5%E9%9D%A2.md\">404页面</a></li> <li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/4.12%20%E9%94%99%E8%AF%AF%E9%A1%B5%E9%9D%A2.md\">错误页面</a></li> <li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/4.13%20%E6%97%A5%E5%BF%97.md\">日志</a> <ul> <li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/4.13%20%E6%97%A5%E5%BF%97.md#4131-winston-%E5%92%8C-express-winston\">winston 和 express-winston</a></li> <li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/4.13%20%E6%97%A5%E5%BF%97.md#4132-gitignore\">.gitignore</a></li> </ul> </li> <li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/4.14%20%E6%B5%8B%E8%AF%95.md\">测试</a> <ul> <li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/4.14%20%E6%B5%8B%E8%AF%95.md#4141-mocha-%E5%92%8C-supertest\">mocha 和 supertest</a></li> <li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/4.14%20%E6%B5%8B%E8%AF%95.md#4142-%E6%B5%8B%E8%AF%95%E8%A6%86%E7%9B%96%E7%8E%87\">测试覆盖率</a></li> </ul> </li> <li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/4.15%20%E9%83%A8%E7%BD%B2.md\">部署</a> <ul> <li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/4.15%20%E9%83%A8%E7%BD%B2.md#4151-%E7%94%B3%E8%AF%B7-mlab\">申请 MLab</a></li> <li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/4.15%20%E9%83%A8%E7%BD%B2.md#4152-pm2\">pm2</a></li> <li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/4.15%20%E9%83%A8%E7%BD%B2.md#4152-%E9%83%A8%E7%BD%B2%E5%88%B0-heroku\">部署到 Heroku</a></li> <li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/4.15%20%E9%83%A8%E7%BD%B2.md#4153-%E9%83%A8%E7%BD%B2%E5%88%B0-ucloud\">部署到 UCloud</a></li> </ul> </li> </ul> </li> </ul> </div>\",\ntitle: \"《一起学 Node.js》彻底重写完毕\",\nlast_reply_at: \"2016-12-01T07:39:03.192Z\",\ngood: false,\ntop: true,\nreply_count: 95,\nvisit_count: 18667,\ncreate_at: \"2016-11-03T10:07:10.155Z\",\nauthor: - {\nloginname: \"nswbmw\",\navatar_url: \"https://avatars.githubusercontent.com/u/4279697?v=3&s=120\"\n}\n},\n- {\nid: \"583b8e4227d001d606ac19f0\",\nauthor_id: \"542bff0c10ab5791322617c7\",\ntab: \"share\",\ncontent: \"<div class=\"markdown-text\"><img src=\"http://7xkeqi.com1.z0.glb.clouddn.com/nodeparty/logo/Logo-HD.jpg\" width=\"100\" /> <h1>What is Node Party?</h1> <p>每月组织JavaScript/Node开发者聚会，关注热门的前端、后端框架，开发工具和方法。</p> <p>＊ 学习新东西 ＊ 认识新朋友 ＊ 聚餐</p> <p>我们会为你准备： 咖啡，甜点，红酒，爆米花和动听的音乐，一起度过一个愉快的下午。</p> <h2>时间</h2> <p>12月11日 星期日 下午13:00 ～ 18:00</p> <h2>地点</h2> <p><a href=\"http://www.kejisi.com/\">科技寺</a>（北新桥） 地址: 东城区 东四北大街107号科林大厦B座107室(近北新桥地铁站) <a href=\"http://j.map.baidu.com/797pA\">地图</a></p> <p><h2><font color=\"red\"> 报名地址</font> </h2></p> <blockquote> <p>为了提升活动质量，鼓励分享，本期node-party进行售票，早鸟票和标准票只是价格上不同，分别是29元和49元。</p> </blockquote> <p><a href=\"http://www.bagevent.com/event/291037\">http://www.bagevent.com/event/291037</a></p> <h2>内容</h2> <h3>13:00 ~ 13:30 入场</h3> <h3>13:30 - 14:40 如何用6行JavaScript写出微信个人号机器人</h3> <p><strong>嘉宾介绍</strong></p> <img src=\"http://7xkeqi.com1.z0.glb.clouddn.com/nodeparty/archieves/18th/lr-zixua.png\" width=\"200\" /> <p><strong>李卓桓</strong>，PreAngel合伙人，zixia BBS、叽歪网创始人。曾任优酷网首席科学家，ChinaRen系统工程师，水木清华BBS站长。清华大学本科，中欧国际工商学院EMBA。15年互联网创业经验，20年编程经验。著有《Linux网络编程》(2000年)、《反垃圾邮件完全手册》(2006年)等技术作品。热爱</p> <p><strong>李佳芮</strong>，桔子互动创始人/CEO，北京邮电大学计算机系硕士；2014年创立婚庆O2O平台“艾娘子”，同年获得500万天使投资；历任北京的邮电大学IDEA精英汇会长、学生会公关部副部长；曾获得第二届腾讯全国互联网创新创业大赛银奖、第三届京津冀营销创业大赛亚军。桔子互动是一家社区运营服务解决方案提供商，如基于微信的定制开发和运营推广服务。曾服务过亚马逊、腾讯、京东等多家上市公司。 爵士舞爱好者，业余时间创立舞蹈视频教学自媒体“舞哩”，搭建舞蹈社群。半年内原创视频全网播放近千万。多次被美拍、腾讯视频、B站、优酷评为热门精选。</p> <img src=\"http://7xkeqi.com1.z0.glb.clouddn.com/nodeparty/archieves/18th/wechaty-logo-en.png\" width=\"600\" /> <p><strong>演讲内容介绍</strong></p> <ul> <li>Why <a href=\"https://github.com/wechaty/wechaty\">Wechaty</a></li> <li>Wechaty from Scratch</li> <li>Why Browser</li> <li>Selenium WebDriver</li> <li>Wechat Browser Insight</li> <li>Why TypeScript</li> <li>Stacks</li> <li>DevOps</li> <li>What is <a href=\"http://Wechaty.IO\">Wechaty.IO</a></li> <li>Vision</li> <li>Demo</li> <li>Q/A</li> </ul> <h3>15:00 - 16:00 Chatbot 的场景化应用</h3> <p><strong>嘉宾介绍</strong></p> <img src=\"http://7xkeqi.com1.z0.glb.clouddn.com/nodeparty/archieves/18th/wsk.jpg\" width=\"100\" /> <p><strong>王守崑<a href=\"/user/Ein\">@Ein</a></strong>，个性化推荐系统和相关技术在中国的早期实践者。毕业于清华大学自动化系，豆瓣早期初创团队成员之一，曾长期担任豆瓣网首席科学家兼副总裁，负责豆瓣个性化推荐系统搭建。目前创业中，担任爱因互动（Ein）创始人、CEO，专注于自然语言处理和对话服务，向企业和个人用户提供专业、高质量的对话机器人产品。</p> <p><strong>演讲内容介绍</strong></p> <ul> <li>Chatbot兴起的两大基础</li> <li>Chatbot历史、技术和现状</li> <li>Chatbot的适用场景</li> <li>展望</li> </ul> <h3>16:20 - 17:20 Barcamp</h3> <blockquote> <p>每个人介绍一下自己</p> </blockquote> <p>简单介绍，公司，工作，兴趣，擅长的技术栈</p> <h2>结束后</h2> <p>晚上有空的，在附近一起吃饭。</p> <hr> <h2>往期回顾</h2> <p><a href=\"https://cnodejs.org/topic/556e7754bf871b3962efb8ef\">领袖硅谷</a> <a href=\"https://cnodejs.org/topic/5593b13b6ba28efa30a603cd\">Geek Lab</a> <a href=\"https://cnodejs.org/topic/55c1ce495965fe2c74f477c5\">科技寺 北新桥</a> <a href=\"https://cnodejs.org/topic/55efee1e4b6a9b371ef8177b\">36kr 氪空间</a> <a href=\"https://cnodejs.org/topic/562987ede6a3804c5815916d\">科技寺 三里屯</a> <a href=\"https://cnodejs.org/topic/5643510d101695495b57555c\">渡鸦科技</a> <a href=\"https://cnodejs.org/topic/5665002f1c64fabd06fd8c7a\">零壹时光</a> <a href=\"https://cnodejs.org/topic/56b17e2624b0c1ec628ff1ad\">世贸天阶</a> <a href=\"https://cnodejs.org/topic/56cc42d069bd845433d72b32\">Coffee Maker</a> <a href=\"https://cnodejs.org/topic/5714d08316e60bcd0d0bffd9\">科技寺 三里屯</a> <a href=\"https://cnodejs.org/topic/573eaec9fcf698421d2036f5\">NodeJS Live Beijing 2016</a> <a href=\"https://cnodejs.org/topic/5784a7ba3b501f7054982f25\">望京科技寺</a> <a href=\"https://cnodejs.org/topic/578895a249e4faa95429c7c9\">三里屯科技寺</a></p> <pre class=\"prettyprint\"><code>照片，PPT，Slides https://github.com/rockq-org/node-party </code></pre><h2>加入 BJ NodeJS Club</h2> <img src=\"http://7xkeqi.com1.z0.glb.clouddn.com/nodeparty/archieves/17th/post.png\" width=\"600\" /></div>\",\ntitle: \"［ 北京］12月11日 node-party @ 北新桥科技寺，报名从速 !\",\nlast_reply_at: \"2016-12-01T04:45:04.594Z\",\ngood: false,\ntop: true,\nreply_count: 3,\nvisit_count: 635,\ncreate_at: \"2016-11-28T01:54:10.359Z\",\nauthor: - {\nloginname: \"Samurais\",\navatar_url: \"https://avatars.githubusercontent.com/u/3538629?v=3&s=120\"\n}\n},\n- {\nid: \"58351689bde2b59e06141e9f\",\nauthor_id: \"504c28a2e2b845157708cb61\",\ntab: \"job\",\ncontent: \"<div class=\"markdown-text\"><p>因为经常收到各种内推咨询，所以我直接发个帖子做这事哈。</p> <p>需要内推腾讯的同学可以直接找我哈，在帖子下留言可以为大家介绍一下我解答一些常见的问题，如果我懂的话。</p> <p>这个是针对社招的内推，校招和实习的话，每年有固定的时间窗口，想参加校招的同学先关注腾讯的校招资讯再联系我。</p> <p>参加内推的流程：</p> <ol> <li>在 <a href=\"http://hr.tencent.com/\">http://hr.tencent.com/</a> 选择3个你想入职的岗位</li> <li>将想要入职的岗位（如：<code>OMG236-web前端开发工程师</code>）和简历一起发到 <a href=\"mailto:alsotang@tencent.com\">alsotang@tencent.com</a> ，抄送 <a href=\"mailto:alsotang@gmail.com\">alsotang@gmail.com</a></li> <li>我将简历内推到对应的岗位去</li> </ol> <p>相关的入职各种事宜都可以在邮件中向我咨询。不要留言发简历，要pdf或word格式的才能录入系统。</p> <p>此贴长期有效。</p> </div>\",\ntitle: \"【腾讯】各种岗位均可内推，前后端均可\",\nlast_reply_at: \"2016-11-30T12:33:19.171Z\",\ngood: true,\ntop: true,\nreply_count: 17,\nvisit_count: 1275,\ncreate_at: \"2016-11-23T04:09:45.315Z\",\nauthor: - {\nloginname: \"alsotang\",\navatar_url: \"https://avatars.githubusercontent.com/u/1147375?v=3&s=120\"\n}\n},\n- {\nid: \"57ea257b3670ca3f44c5beb6\",\nauthor_id: \"541bf9b9ad60405c1f151a03\",\ntab: \"share\",\ncontent: \"<div class=\"markdown-text\"><blockquote> <p>写在头部</p> </blockquote> <p>本项目写于小程序发布之初，期间小程序官方有过几次更新，例如准备移除了loading组件、改变page的默认高度等，主要看的还是博卡君的文章，后来在朋友的建议下在9月27号写了本篇文章并分享到github上，是做为微信小应用的入门教程，<strong>并非某在线学习网站499收费课程的作业</strong>，特此声明。</p> <blockquote> <p>微信应用号入门实践之cnode社区版</p> </blockquote> <p>首先感谢cnode社区提供的api，本次实现了简单的cnode社区应用号制作。 实现了数据的读取、展示， 实现了简单的布局， 实现了下一页功能。</p> <p>放上我的github地址 <a href=\"https://github.com/coolfishstudio/wechat-webapp-cnode\">https://github.com/coolfishstudio/wechat-webapp-cnode</a></p> <p><img src=\"//dn-cnode.qbox.me/Fo4zG2Vfe50352POPZYXv8Ls0Jcc\" alt=\"首页列表\"> <img src=\"//dn-cnode.qbox.me/Fl7TiaW13s541lHZ7Crq7NxKshqG\" alt=\"内容详情\"></p> <p>下面就说说我做这个的过程，不足之处，请多多指教，只愿为进步。</p> <h2>1.创建项目</h2> <p>首先，在官网下载工具，<a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/download.html?t=1474887501214\">下载地址</a> 我的是选择mac版本0.9.092300。</p> <p>然后跟着官方的<a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/?t=1474887501301\">简版教程</a> 创建一个项目。</p> <h4>注：现在官方的工具支持无appid创建项目。</h4> <h5>1.打开开发者工具，选择“添加项目”</h5> <p><img src=\"//dn-cnode.qbox.me/FsqxRNIzNDyzItbl-vhAFPr0J5t2\" alt></p> <h5>2.选择无appid，填写地址，创建项目</h5> <p><img src=\"//dn-cnode.qbox.me/Fp098WRAyxgJ415Dt_f0YGhjIMHr\" alt></p> <h5>3.创建成功，看到默认的Demo项目页面</h5> <p><img src=\"//dn-cnode.qbox.me/FuvUmKfcUu8MeLc4eeuwNBfkbfMC\" alt></p> <h2>2.配置</h2> <p>默认的项目里已经没有关于tabBar的配置信息，所以为了学习，我把这个配置进行了修改。</p> <p>首先关于配置的说明同样来自于<a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/framework/config.html?t=1474887501556\">官方</a></p> <p>注意：官方的代码有些字段是不一样的，小心被坑。</p> <pre class=\"prettyprint\"><code>{ \"pages\":[ \"pages/index/index\", \"pages/logs/logs\" ], \"window\":{ \"backgroundTextStyle\":\"light\", \"navigationBarBackgroundColor\": \"#fff\", \"navigationBarTitleText\": \"WeChat\", \"navigationBarTextStyle\":\"black\" }, \"tabBar\":{ \"list\": [{ \"pagePath\": \"pages/index/index\", \"text\": \"首页\" }, { \"pagePath\": \"pages/logs/logs\", \"text\": \"日志\" }] } } </code></pre><p>增加了tabBar, 查看调试 <img src=\"//dn-cnode.qbox.me/Fl-OboTDeCULcPbs5BiM81nj_Xrc\" alt> 看界面是如此的简陋，为此针对tabBar参考官方说明进行了简单的美化。</p> <pre class=\"prettyprint\"><code> \"tabBar\":{ \"color\":\"#272636\", \"selectedColor\":\"#80bd01\", \"backgroundColor\":\"#fff\", \"borderStyle\":\"white\", \"list\":[{ \"pagePath\":\"pages/index/index\", \"text\":\"首页\", \"iconPath\":\"images/tabBar/my.png\", \"selectedIconPath\":\"images/tabBar/my_hl.png\" },{ \"pagePath\":\"pages/index/index\", \"text\":\"我的\", \"iconPath\":\"images/tabBar/list.png\", \"selectedIconPath\":\"images/tabBar/list_hl.png\" }] } </code></pre><p>效果如图 <img src=\"//dn-cnode.qbox.me/FjzwAq6RH5TstCXIYb5ZIt6z3cuj\" alt> 最后根据文档，对默认页面的窗口表现进行了修改</p> <pre class=\"prettyprint\"><code> \"window\":{ \"backgroundTextStyle\":\"black\", \"backgroundColor\":\"#fff\", \"navigationBarBackgroundColor\":\"#000\", \"navigationBarTitleText\":\"CNODE 应用号版\", \"navigationBarTextStyle\":\"white\", \"enablePullDownRefresh\":\"true\" }, </code></pre><p>效果如图 <img src=\"//dn-cnode.qbox.me/Fl4S7o2m50JXXt1xebSgq1pNR_iX\" alt> 整体配置文件为</p> <pre class=\"prettyprint\"><code>{ \"pages\":[ \"pages/index/index\", \"pages/logs/logs\" ], \"window\":{ \"backgroundTextStyle\":\"black\", \"backgroundColor\":\"#fff\", \"navigationBarBackgroundColor\":\"#000\", \"navigationBarTitleText\":\"CNODE 应用号版\", \"navigationBarTextStyle\":\"white\", \"enablePullDownRefresh\":\"true\" }, \"tabBar\":{ \"color\":\"#272636\", \"selectedColor\":\"#80bd01\", \"backgroundColor\":\"#fff\", \"borderStyle\":\"white\", \"list\":[{ \"pagePath\":\"pages/index/index\", \"text\":\"首页\", \"iconPath\":\"images/tabBar/my.png\", \"selectedIconPath\":\"images/tabBar/my_hl.png\" },{ \"pagePath\":\"pages/index/index\", \"text\":\"我的\", \"iconPath\":\"images/tabBar/list.png\", \"selectedIconPath\":\"images/tabBar/list_hl.png\" }] } } </code></pre><h2>3.制作首页列表</h2> <p>根据官方要求，我在pages文件夹内创建了topics文件夹，并创建了对应了 topics.js、topics.wxml、topics.wxss 三个文件。</p> <h3>1.注册页面</h3> <p>首先在配置文件里注册这个topics,</p> <pre class=\"prettyprint\"><code> \"pages\":[ \"pages/topics/topics\", \"pages/index/index\", \"pages/logs/logs\" ], </code></pre><p>并且制定tabBar点击跳到对应的topics页面</p> <pre class=\"prettyprint\"><code> \"tabBar\":{ \"color\":\"#272636\", \"selectedColor\":\"#80bd01\", \"backgroundColor\":\"#fff\", \"borderStyle\":\"white\", \"list\":[{ \"pagePath\":\"pages/topics/topics\", \"text\":\"首页\", \"iconPath\":\"images/tabBar/my.png\", \"selectedIconPath\":\"images/tabBar/my_hl.png\" },{ \"pagePath\":\"pages/index/index\", \"text\":\"我的\", \"iconPath\":\"images/tabBar/list.png\", \"selectedIconPath\":\"images/tabBar/list_hl.png\" }] } </code></pre><h5>注意：我发现注册页面的顺序会影响到默认显示tabBar的顺序，所以我把<code>\"pages/topics/topics\"</code>放到了<code>\"pages/index/index\"</code>的前面</h5> <p>然后编写topics.js</p> <pre class=\"prettyprint\"><code>Page({ data: { title: '首页列表' }, onLoad: function () { console.log('onLoad by topics'); } }); </code></pre><p>以及topics.wxml文件</p> <pre class=\"prettyprint\"><code><view class=\"topics-main\"> 测试首页列表界面 </view> </code></pre><p>和topics.wxss文件</p> <pre class=\"prettyprint\"><code>.topics-main { background: #f60; height: 100%; } </code></pre><p>最后效果如图 <img src=\"//dn-cnode.qbox.me/FiunQ0XhES_sidHnkBN9YxABF2iI\" alt></p> <h3>2.创建请求</h3> <p>根据文档<a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/api/network-request.html?t=1474887499445\">请求数据</a>，在util文件夹内创建一个api.js文件，专门进行数据请求处理。</p> <pre class=\"prettyprint\"><code>'use strict'; var HOST_URI = 'https://cnodejs.org/api/v1'; var GET_TOPICS = '/topics'; var GET_TOPIC_BY_ID = '/topic/'; function obj2uri (obj) { return Object.keys(obj).map(function (k) { return encodeURIComponent(k) + '=' + encodeURIComponent(obj[k]); }).join('&'); } module.exports = { // 获取列表数据 getTopics: function (obj) { return HOST_URI + GET_TOPICS + '?' + obj2uri(obj); }, // 获取内容页数据 getTopicByID: function (id, obj) { return HOST_URI + GET_TOPIC_BY_ID + id + '?' + obj2uri(obj); } }; </code></pre><p>修改topics.js</p> <pre class=\"prettyprint\"><code>var Api = require('../../utils/api.js'); Page({ data: { title: '首页列表' }, onLoad: function () { console.log('onLoad by topics'); this.fetchData();// 获取数据 }, fetchData: function (data) { // 处理参数 if (!data) data = {}; if (!data.page) data.page = 1; wx.request({ url: Api.getTopics(data), success: function (res) { console.log(res); } }); } }); </code></pre><p>效果如图 <img src=\"//dn-cnode.qbox.me/FoonyAMQBgqDpiTKZshoB3ZmnUEU\" alt> 成功拿到了数据。</p> <h3>3.完善首页列表</h3> <p>拿到了数据，也能修改界面，那么就直接完善这个首页吧</p> <p>代码就不放了，直接上图 <img src=\"//dn-cnode.qbox.me/Fo4zG2Vfe50352POPZYXv8Ls0Jcc\" alt> 我认为这里值得说的大概只有loading、循环、传参、下一页和页面跳转了。</p> <h4>1.loading</h4> <pre class=\"prettyprint\"><code> <loading hidden=\"{{hidden}}\"> 加载中... </loading> </code></pre><p>在topics.wxml中写官方提供的loading组件，根据在topics.js中对hidden值的修改，来触发loading。</p> <h4>2.循环数据，展示列表</h4> <p>文档提供了<a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/framework/view/wxml/list.html?t=1474887501556\">列表渲染</a></p> <p>通过<code>wx:for</code>实现列表的渲染。</p> <h5>注意: 默认数组的当前项的下标变量名默认为index，数组当前项的变量名默认为item。</h5> <pre class=\"prettyprint\"><code><block wx:for=\"{{postsList}}\"> <view class=\"posts-item\" index=\"{{index}}\" id=\"{{item.id}}\" catchtap=\"redictDetail\"> <view class=\"author\"> <image class=\"author-avatar\" src=\"{{item.author.avatar_url}}\"></image> <view class=\"author-name\">{{item.author.loginname}}</view> <view class=\"posts-tag hot\" wx:if=\"{{item.top === true}}\">置顶</view> <view class=\"posts-tag\" wx:if=\"{{item.good === true}}\">精华</view> <view class=\"posts-last-reply\">{{item.last_reply_at}}</view> </view> <view class=\"posts-title\">{{item.title}}</view> <view class=\"bar-info\"> <view class=\"bar-info-item\"> <image class=\"bar-info-item-icon\" src=\"/images/icon/reply.png\"></image> <view class=\"bar-info-item-number\">{{item.reply_count}}</view> </view> <view class=\"bar-info-item\"> <image class=\"bar-info-item-icon\" src=\"/images/icon/visit.png\"></image> <view class=\"bar-info-item-number\">{{item.visit_count}}</view> </view> </view> </view> </block> </code></pre><p>附上一个没有样式的列表展现 <img src=\"//dn-cnode.qbox.me/FkoTZY1Q9kqOWa1-e70FHifzHVo7\" alt></p> <h4>3.传参，实现tab切换</h4> <p>根据cnode的api可以知道通过tab不同的值，获得到不同标签下的内容列表。</p> <p>所以 在页面的最上面 tab 栏中</p> <pre class=\"prettyprint\"><code> <view class=\"top-bar\"> <view class=\"top-bar-item\" id=\"all\" catchtap=\"onTapTag\">全部</view> <view class=\"top-bar-item\" id=\"good\" catchtap=\"onTapTag\">精华</view> <view class=\"top-bar-item\" id=\"share\" catchtap=\"onTapTag\">分享</view> <view class=\"top-bar-item\" id=\"ask\" catchtap=\"onTapTag\">问答</view> <view class=\"top-bar-item\" id=\"job\" catchtap=\"onTapTag\">招聘</view> </view> </code></pre><p>将id进行定义，通过获取id拿到对应的tab类型。</p> <p>其中<code>catchtap</code>是事件绑定。</p> <p>bind事件绑定不会阻止冒泡事件向上冒泡，catch事件绑定可以阻止冒泡事件向上冒泡。</p> <p>在topics.js获取</p> <pre class=\"prettyprint\"><code> onTapTag: function (e) { var self = this; var tab = e.currentTarget.id; // 这里就能获取到不同的tab值了 self.setData({ tab: tab }); if (tab !== 'all') { this.fetchData({tab: tab}); } else { this.fetchData(); } }, </code></pre><h4>4.下一页的实现</h4> <p>根据文档，组件的视图容器中有<a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/component/scroll-view.html?t=1474887496374\">scroll-view</a>这个可滚动视图区域。</p> <h5>注意：使用竖向滚动时，需要给<scroll-view/>一个固定高度。</h5> <pre class=\"prettyprint\"><code><scroll-view class=\"posts-list\" style=\"height:100%\" scroll-y=\"true\" bindscrolltolower=\"lower\"> <block wx:for=\"{{postsList}}\"> ... </block> </scroll-view> </code></pre><p>topics.js文件</p> <pre class=\"prettyprint\"><code> lower: function (e) { var self = this; // 修改当前页码 self.setData({ page: self.data.page + 1 }); // 判断当前页的tab值 进行请求数据 if (self.data.tab !== 'all') { this.fetchData({tab: self.data.tab, page: self.data.page}); } else { this.fetchData({page: self.data.page}); } } </code></pre><h4>5.跳页的实现</h4> <p>在<code>posts-item</code>中已经进行了事件绑定。利用<code>wx.navigateTo</code>实现页面的跳转。</p> <h5>注意：一个应用同时只能打开5个页面，当已经打开了5个页面之后，wx.navigateTo不能正常打开新页面。</h5> <pre class=\"prettyprint\"><code>redictDetail: function (e) { console.log('我要看详情'); var id = e.currentTarget.id, url = '../detail/detail?id=' + id; // 这里的detail是需要创建对应的文件，以及页面注册的 wx.navigateTo({ url: url }) }, </code></pre><h3>4.实现详情页</h3> <p>同样的原理，创建detail文件，并注册，获取数据，并美化页面。 <img src=\"//dn-cnode.qbox.me/FmJ5n5-t3gLCfFQTpbzIBS1_ag2L\" alt></p> <h3>5.总结</h3> <ul> <li>微信小应用页面的脚本逻辑在是在JsCore中运行，JsCore是一个没有窗口对象的环境，所以不能再脚本中使用window，也无法在脚本中操作组件</li> <li>同样不能用jquery</li> <li>也不能操作dom</li> <li>部分标签不支持，比如 h1-h6 会编译报错。</li> <li>暂时没找到解决富文本详情页显示的办法。</li> <li>整体下来，感觉开发简单，限制很多。</li> <li>写过react的看这个确实比较简单。</li> </ul> <p>放上我的github地址 <a href=\"https://github.com/coolfishstudio/wechat-webapp-cnode\">https://github.com/coolfishstudio/wechat-webapp-cnode</a></p> <p>最后感谢：cnode社区和博卡君</p> <p>附上 博卡君的教程</p> <p><a href=\"https://my.oschina.net/wwnick/blog/750055\">全球首个微信应用号开发教程！通宵吐血赶稿，每日更新！</a></p> <p><a href=\"https://my.oschina.net/wwnick/blog/750495\">博卡君的应用号（小程序）开发教程首发第二弹！（0923）</a></p> <p><a href=\"https://my.oschina.net/wwnick/blog/750974\">第三弹！全球首个微信应用号开发教程！通宵吐血赶稿，每日更新！</a></p> <p><a href=\"https://my.oschina.net/wwnick/blog/751826\">第四弹！全球首个微信应用号开发教程！通宵吐血赶稿，每日更新！</a></p> <p><a href=\"https://my.oschina.net/wwnick/blog/752421\">第五弹！全球首个微信应用号开发教程！通宵吐血赶稿，每日更新！</a></p> <p><a href=\"https://my.oschina.net/wwnick/blog/753597\">第六弹！全球首个微信小程序（应用号）开发教程！通宵吐血赶稿！</a> －－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－ 总结一下我遇到的问题 1.页面没有注册 那么 template 模版无法传递数据 拿不到动态数据 但是能使用wxss 2.进度条注意右侧百分号 100%的时候 进度条缩短 3.轮播图加上属性vertical=“vertical/horizontal” 可以修改布局方向，文档没说 4.有关icon，文档提供默认的只有9个，实际目前测出有15个 success, info, warn, waiting, safe_success, safe_warn,success_circle, success_no_circle, waiting_circle, circle, download,info_circle, cancel, search, clear －－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－ 鉴于有很多童鞋还不了解小应用和h5页面有什么区别 我决定安利一下我公司的一个文章 <a href=\"http://url.cn/41kcsQr\">小云百科:什么是“微信小程序”</a></p> </div>\",\ntitle: \"分享我用cnode社区api做微信小应用的入门过程\",\nlast_reply_at: \"2016-11-30T07:22:21.144Z\",\ngood: false,\ntop: true,\nreply_count: 121,\nvisit_count: 19116,\ncreate_at: \"2016-09-27T07:53:31.872Z\",\nauthor: - {\nloginname: \"coolfishstudio\",\navatar_url: \"https://avatars.githubusercontent.com/u/8791709?v=3&s=120\"\n}\n},\n- {\nid: \"580ddc2eeae2a24f34e67e69\",\nauthor_id: \"504c28a2e2b845157708cb61\",\ntab: \"share\",\ncontent: \"<div class=\"markdown-text\"><p><img src=\"//dn-cnode.qbox.me/FjfPMJYFAbyV1-OM-CcCC5Wk2tmY\" alt=\"江湖网页版01.jpg\"> <img src=\"//dn-cnode.qbox.me/FkwjibIXclB7i5988nqIU2Urdot6\" alt=\"江湖网页版02.jpg\"> <img src=\"//dn-cnode.qbox.me/FtrbZGh5EhRj9F5Gqf6zxoaAtAdu\" alt=\"江湖网页版03.jpg\"> <img src=\"//dn-cnode.qbox.me/FoG0Zu0fTUGQovqVTHpY-mpKg_DD\" alt=\"江湖网页版04.jpg\"> <img src=\"//dn-cnode.qbox.me/FjNEtfvguZpaMbSFdfqWEWa0WaKi\" alt=\"江湖网页版05.jpg\"> <img src=\"//dn-cnode.qbox.me/Fv7Gn_eSisMoWjcg1tY30tpyYBH7\" alt=\"江湖网页版06.jpg\"> <img src=\"//dn-cnode.qbox.me/FkrxD4s4PIWDCyfEAb7-fAXyaCkI\" alt=\"江湖网页版07.jpg\"> <img src=\"//dn-cnode.qbox.me/Fp2Rnl5M_UcmDZCVEB7hrEk1Pw84\" alt=\"江湖网页版08.jpg\"> <img src=\"//dn-cnode.qbox.me/Fs87hfP9Sd44vsLYCxX5mfZCojEg\" alt=\"江湖网页版09.jpg\"></p> <p>社区加盟报名表：<a href=\"http://form.mikecrm.com/rbWwV4\">http://form.mikecrm.com/rbWwV4</a></p> </div>\",\ntitle: \"这，就是技术人的江湖\",\nlast_reply_at: \"2016-11-30T02:23:03.333Z\",\ngood: false,\ntop: true,\nreply_count: 22,\nvisit_count: 9260,\ncreate_at: \"2016-10-24T10:02:22.775Z\",\nauthor: - {\nloginname: \"alsotang\",\navatar_url: \"https://avatars.githubusercontent.com/u/1147375?v=3&s=120\"\n}\n},\n- {\nid: \"58394a2327d001d606ac1995\",\nauthor_id: \"5837c1c9bde2b59e06141f92\",\ntab: \"ask\",\ncontent: \"<div class=\"markdown-text\"><p>安装完，node app.js，访问loalhost:3000时 出现这个错误： Connect 500 TypeError: Cannot read property ‘user’ of undefined。 会不会是因为mongo的版本问题。 请教各位怎么解决？谢谢！</p> </div>\",\ntitle: \"安装nodeclub的问题。\",\nlast_reply_at: \"2016-12-01T08:31:15.871Z\",\ngood: false,\ntop: false,\nreply_count: 3,\nvisit_count: 169,\ncreate_at: \"2016-11-26T08:38:59.096Z\",\nauthor: - {\nloginname: \"bainana\",\navatar_url: \"https://avatars.githubusercontent.com/u/17998257?v=3&s=120\"\n}\n},\n- {\nid: \"583d1e3a254727447987ca62\",\nauthor_id: \"573212537abbbd520cb244b3\",\ntab: \"ask\",\ncontent: \"<div class=\"markdown-text\"><p>现在查询的格式是 { id: 1, emp_id: ‘1’, created_at: Tue Nov 03 2015 15:25:27 GMT+0800 (CST), updated_at: Tue Nov 03 2015 15:25:27 GMT+0800 (CST), account: { id: 2, email: ‘b’, created_at: Tue Nov 03 2015 15:25:27 GMT+0800 (CST), updated_at: Tue Nov 03 2015 15:25:27 GMT+0800 (CST), user_id: 1 } } 我想要这种格式的 { id: 1, emp_id: ‘1’, created_at: Tue Nov 03 2015 15:25:27 GMT+0800 (CST), updated_at: Tue Nov 03 2015 15:25:27 GMT+0800 (CST), email: ‘b’, } 把email拿出来不知道能否实现</p> </div>\",\ntitle: \"sequelize查询问题\",\nlast_reply_at: \"2016-12-01T08:29:52.263Z\",\ngood: false,\ntop: false,\nreply_count: 5,\nvisit_count: 196,\ncreate_at: \"2016-11-29T06:20:42.668Z\",\nauthor: - {\nloginname: \"dlyt\",\navatar_url: \"https://avatars.githubusercontent.com/u/18431616?v=3&s=120\"\n}\n},\n- {\nid: \"583eb174d1257d4c0dffb024\",\nauthor_id: \"583517e427d001d606ac1893\",\ntab: \"ask\",\ncontent: \"<div class=\"markdown-text\"><p>目前我有一些数据是字符型的数字，想要在其中找出小于60的数字 操作数据库用的是mongoose，在比较的时候发现gt()、lt()的比较是按照字符来比较的，即12 < 2这种比较 我是通过下面的方法来过滤数据的，但是数据中还有很多小数（6.4）我过滤不出来</p> <pre class=\"prettyprint\"><code>query = { $or: [{$and: [{ \"oriScore\": { $lt: \"60\"}}, { \"oriScore\": { $ne: \"100\"}}]}, {\"oriScore\": \"7\"}, {\"oriScore\": \"8\"}, { \"oriScore\": \"9\"}, {\"oriScore\": \"不合格\"}] } </code></pre><p>有没有什么办法在不使用$where的情况找出这些数据？</p> </div>\",\ntitle: \"mongodb如何不按字符比较来筛选数据？\",\nlast_reply_at: \"2016-12-01T08:25:07.486Z\",\ngood: false,\ntop: false,\nreply_count: 1,\nvisit_count: 77,\ncreate_at: \"2016-11-30T11:01:08.305Z\",\nauthor: - {\nloginname: \"abcdGJJ\",\navatar_url: \"https://avatars.githubusercontent.com/u/12658668?v=3&s=120\"\n}\n},\n- {\nid: \"583fddf0d1257d4c0dffb08e\",\nauthor_id: \"57637029c13e1e492222bd2d\",\ntab: \"share\",\ncontent: \"<div class=\"markdown-text\"><p><a href=\"https://github.com/suxiaoxin/node-echarts\">https://github.com/suxiaoxin/node-echarts</a> 有时候我们需要在后台生成报表，可以用nodejs生成echarts报表</p> </div>\",\ntitle: \"用nodejs生成echarts图表\",\nlast_reply_at: \"2016-12-01T08:23:12.016Z\",\ngood: false,\ntop: false,\nreply_count: 0,\nvisit_count: 16,\ncreate_at: \"2016-12-01T08:23:12.016Z\",\nauthor: - {\nloginname: \"suxiaoxin\",\navatar_url: \"https://avatars.githubusercontent.com/u/17695103?v=3&s=120\"\n}\n},\n- {\nid: \"583eb42a254727447987cac4\",\nauthor_id: \"50d91f29a7e6c6171a1c0392\",\ntab: \"ask\",\ncontent: \"<div class=\"markdown-text\"><p>如题，在团队项目里，计划全程async/await，我现在是用bluebird的promisify包一层，然后放在一个fs-promise文件里，但是require的时候很丑啊，而且团队成员也都是习惯了require(‘fs’)，再者，node原生的好多，我不能都包一层吧？问问大家都是怎么做的</p> </div>\",\ntitle: \"把原生fs模块包装成promise的最佳实践是什么？\",\nlast_reply_at: \"2016-12-01T08:12:43.933Z\",\ngood: false,\ntop: false,\nreply_count: 9,\nvisit_count: 179,\ncreate_at: \"2016-11-30T11:12:42.743Z\",\nauthor: - {\nloginname: \"rwing\",\navatar_url: \"//gravatar.com/avatar/af73bb3077950d1c01e19d5e6a1a1281?size=48\"\n}\n},\n- {\nid: \"583eac20d1257d4c0dffb021\",\nauthor_id: \"526bcfcb5ed0dc3e4b2120f4\",\ntab: \"ask\",\ncontent: \"<div class=\"markdown-text\"><p>用jmeter一压力测试，node.js的cpu就很高，大家看看怎么回事呢</p> <p>ps： 服务器：cpu：16核 内存：16G</p> <p>jmeter配置： <img src=\"//dn-cnode.qbox.me/FpCQh7uJIbIr2RFeuvq0Tf8uULHw\" alt=\"untitled1.png\"></p> <p>服务器 top -d 2的结果：</p> <p><img src=\"//dn-cnode.qbox.me/Fr2OH0MQjxlZCuB9N8QKIk0rhjlc\" alt=\"untitled2.png\"></p> </div>\",\ntitle: \"用jmeter一压力测试，node.js的cpu就很高，大家看看怎么回事呢\",\nlast_reply_at: \"2016-12-01T08:09:25.022Z\",\ngood: false,\ntop: false,\nreply_count: 9,\nvisit_count: 181,\ncreate_at: \"2016-11-30T10:38:24.694Z\",\nauthor: - {\nloginname: \"whw1988\",\navatar_url: \"//gravatar.com/avatar/d9e8e7d540309dfa1ca67e804ad92b52?size=48\"\n}\n},\n- {\nid: \"583fafb4efa98d907a528269\",\nauthor_id: \"58219f2bd5e70f9005343462\",\ntab: \"ask\",\ncontent: \"<div class=\"markdown-text\"><p>//路径 setting app.use(serveStatic(‘node_modules’)); //static files app.use(express.static(path.join(__dirname, ‘public’)));</p> <p>我代码虽然这样写，但是我不懂为什么要这样写，请教一下大家，多谢啦</p> </div>\",\ntitle: \"express.static和serve-static有什么区别？\",\nlast_reply_at: \"2016-12-01T08:04:18.764Z\",\ngood: false,\ntop: false,\nreply_count: 3,\nvisit_count: 60,\ncreate_at: \"2016-12-01T05:05:56.727Z\",\nauthor: - {\nloginname: \"mengLLLL\",\navatar_url: \"https://avatars.githubusercontent.com/u/13366294?v=3&s=120\"\n}\n},\n- {\nid: \"583e721b27d001d606ac1ab8\",\nauthor_id: \"5629da22e6a3804c58159198\",\ntab: \"ask\",\ncontent: \"<div class=\"markdown-text\"><p>目前看到过ionic+webpack,但是没有vue,也看到过webpack+vue的,现在有把他们都整合一起的脚手架项目吗? 没有的话我自己造个轮子,不知道有没有这种需求?</p> <p>现在使用vue的前端,使用什么打包客户端?</p> </div>\",\ntitle: \"谁那有看到过使用ionic+webpack+vue的脚手架项目?\",\nlast_reply_at: \"2016-12-01T08:03:40.722Z\",\ngood: false,\ntop: false,\nreply_count: 13,\nvisit_count: 180,\ncreate_at: \"2016-11-30T06:30:51.621Z\",\nauthor: - {\nloginname: \"qxl1231\",\navatar_url: \"https://avatars.githubusercontent.com/u/8305742?v=3&s=120\"\n}\n},\n- {\nid: \"53cc8a1a7404f47d7f2d9a78\",\nauthor_id: \"53cc882a7404f47d7f2d38fb\",\ncontent: \"<div class=\"markdown-text\"><p>打字卡然后弹出报错的Out of memory 让我设置 xmx的值，原来是512M 我变成1024M过会编辑几行代码又弹框了，不知道怎么解决~~！版本用了7.0.3和最新的8.0.4都试过了，sublime text 2里面用的挺好的，奇怪的是其它的工程在webstrom里面还挺好的，就有一个不行，关键是我还没有运行这个nodejs程序啊 ，只是单纯的编辑，实在是无语，抱着尝试的心态发个帖子试试~~</p> </div>\",\ntitle: \"webstorm里面打字怎么顿卡？\",\nlast_reply_at: \"2016-12-01T07:45:13.254Z\",\ngood: false,\ntop: false,\nreply_count: 20,\nvisit_count: 13299,\ncreate_at: \"2014-07-21T03:33:46.826Z\",\nauthor: - {\nloginname: \"Ezrawy\",\navatar_url: \"https://avatars.githubusercontent.com/u/8220005?&s=120\"\n}\n},\n- {\nid: \"536cefc935089b3457005274\",\nauthor_id: \"52e9f718953654bb713b88d1\",\ncontent: \"<div class=\"markdown-text\"><p>请容许我询问一下，本帖不是关于Node，<a href=\"http://xn--6kq63e7w1axmy.NET\">而是关于.NET</a> ：） 最近在研究C#当中的Attribute和Reflection，想自己写一个个人的ORM 就是在主键的设置和关系的映射还不是很了解，有没有朋友实现过。 或者有没有这方面的研究资料。：)</p> </div>\",\ntitle: \"有没有人自己写过ORM\",\nlast_reply_at: \"2016-12-01T07:31:20.022Z\",\ngood: false,\ntop: false,\nreply_count: 18,\nvisit_count: 1718,\ncreate_at: \"2014-05-09T15:10:01.749Z\",\nauthor: - {\nloginname: \"struCoder\",\navatar_url: \"https://avatars.githubusercontent.com/u/6498477?v=3&s=120\"\n}\n},\n- {\nid: \"57c6a45a92fad7e46b4169b7\",\nauthor_id: \"564c6c451ba2ef107f854db2\",\ntab: \"ask\",\ncontent: \"<div class=\"markdown-text\"><p>下午，花了点时间写了简单的http到websocket 服务的雏形，觉得有些问题，我把代码贴出来 var bodyParser = require(‘body-parser’); var express = require(‘express’), app = express(), server = require(‘http’).createServer(app), io = require(‘<a href=\"http://socket.io\">socket.io</a>’).listen(server); <a href=\"//xn--socket-2l2jh81g.xn--io-sh5cuq49m5qbhxpk6fspw96gsr5d\">//引入socket.io模块并绑定到服务器</a> app.use(’/’, express.static(__dirname + ‘/www’)); app.use(bodyParser.json());</p> <p>app.get(’/’, function(req, res){ res.send(‘laugh’); })</p> <p>app.post(’/info’, function(req, res){ //链接id var id = <a href=\"http://req.body.id\">req.body.id</a>; //存放信息 var info = <a href=\"http://req.body.info\">req.body.info</a>; //保存消息记录的数据对象 message[id] = info; res.send(‘laugh’); })</p> <p>//消息记录 var message = []; //保存socket 记录表 var sockets = []; //链接ID var id = 0;</p> <p>server.listen(8000);</p> <p>//socket部分 io.on(‘connection’, function(socket) {</p> <pre class=\"prettyprint\"><code>//接收并处理客户端发送的foo事件 socket.on('login', function(data) { //保存链接ID sockets[id] = socket; socket.id = id; id++; socket.emit('reg', { 'id': id }); console.log(\"login name:\" + data.name + \", id:\" + id); }); //计时器，2秒一次 var tweets = setInterval(function () { //如果有消息，则发送 if (message[socket.id] != null){ socket.volatile.emit('info', message[i]); }; }, 2000); socket.on('disconnect', function () { clearInterval(tweets); }); </code></pre><p>});</p> <p>//2秒触发事件发送, 计数器 var ms = 2000; var timer = setInterval(function(){ for(var i =0 ; i < message.length ;i++){ //搜索数据，存在发送 if(message[i] != null ){ sockets[i].emit(‘info’, message.i); }; }; }, ms); －－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－ 第一个问题，这个思路是否可以，通过websocket 的login 返回一个登录id，保存，然后http 收到post信息，就推送到这个登录的链接的端口。 第二个问题，我写了2个计时器，检测是否收到http方面的消息，然后推送， 第一个在监听事件，链接时候产生，断开销毁，第二个永久保留全局检测，不知道那个好，尤其是socket 是否可以增加对象id，没有把握。 各路大神帮忙看看。</p> </div>\",\ntitle: \"一个http 到websocket 的推送服务器雏形代码，有些问题请大神指教\",\nlast_reply_at: \"2016-12-01T07:18:57.616Z\",\ngood: false,\ntop: false,\nreply_count: 4,\nvisit_count: 499,\ncreate_at: \"2016-08-31T09:33:14.524Z\",\nauthor: - {\nloginname: \"cnlile\",\navatar_url: \"https://avatars.githubusercontent.com/u/14039380?v=3&s=120\"\n}\n},\n- {\nid: \"583e3020efa98d907a5281dc\",\nauthor_id: \"57ce675e80ad316647adcc0b\",\ntab: \"share\",\ncontent: \"<div class=\"markdown-text\"><p>声明：本微信小程序未参考任何小程序代码，完全按官方文档开发。</p> <p>JSpapa微信小程序已开源，欢迎围观！带内容解析，带样式，不是那种简陋的文本显示。</p> <h1>jspapa-wx Github仓库</h1> <p><a href=\"https://github.com/biggerV/jspapa-wx\">https://github.com/biggerV/jspapa-wx</a> 走过路过给个Star 啊。。。</p> <p>jspapa微信小程序版本，官网：<a href=\"https://www.jspapa.com\">https://www.jspapa.com</a></p> <h2>预览图</h2> <p><a href=\"https://www.jspapa.com/topic/show/583801aefa70ac6cf90610f2\">https://www.jspapa.com/topic/show/583801aefa70ac6cf90610f2</a></p> <p>有问题给我留言。</p> </div>\",\ntitle: \"JSpapa微信小程序已开源，欢迎围观！带内容解析，不是那种简陋的文本显示\",\nlast_reply_at: \"2016-12-01T07:12:32.543Z\",\ngood: false,\ntop: false,\nreply_count: 3,\nvisit_count: 279,\ncreate_at: \"2016-11-30T01:49:20.381Z\",\nauthor: - {\nloginname: \"biggerV\",\navatar_url: \"https://avatars.githubusercontent.com/u/21165821?v=3&s=120\"\n}\n},\n- {\nid: \"583fc147d1257d4c0dffb084\",\nauthor_id: \"564c6c451ba2ef107f854db2\",\ntab: \"share\",\ncontent: \"<div class=\"markdown-text\"><p>我只是转发，朋友写的内容。。。</p> <p>为什么koajs并不是一个正确的方向呢？ <a href=\"http://mp.weixin.qq.com/s?__biz=MzA4MTM5ODM3MA==&mid=2649868288&idx=1&sn=5f1bb3d5a0bac0b5434bda2dbbbcf4ff&chksm=8790f70db0e77e1babf8443881afd93ea9e9f3ba2f507ac684e2f7c657315994cc5bf2b6571c#rd\">http://mp.weixin.qq.com/s?__biz=MzA4MTM5ODM3MA==&mid=2649868288&idx=1&sn=5f1bb3d5a0bac0b5434bda2dbbbcf4ff&chksm=8790f70db0e77e1babf8443881afd93ea9e9f3ba2f507ac684e2f7c657315994cc5bf2b6571c#rd</a></p> </div>\",\ntitle: \"转发－－Koa的坑与在express上使用async/await\",\nlast_reply_at: \"2016-12-01T07:07:45.516Z\",\ngood: false,\ntop: false,\nreply_count: 1,\nvisit_count: 72,\ncreate_at: \"2016-12-01T06:20:55.859Z\",\nauthor: - {\nloginname: \"cnlile\",\navatar_url: \"https://avatars.githubusercontent.com/u/14039380?v=3&s=120\"\n}\n},\n- {\nid: \"583fc8d6254727447987cb06\",\nauthor_id: \"566fd7b01d2912ce2a35aa4a\",\ntab: \"job\",\ncontent: \"<div class=\"markdown-text\"><p><strong>后端工程师</strong> 15K-25K</p> <p>岗位描述 负责基础服务方面的开发，包括数据，计算，存储，监控服务的开发。 参与产品服务端架构设计与开发</p> <p>任职要求 1.计算机相关专业，熟练掌握常见的算法和数据结构,至少两年工作经验 2.熟悉Linux基础及Shell脚本，能够独立部署相关系统</p> <ol> <li>熟悉主流键值和关系型数据库</li> <li>具有 C++、Java等其中一种后端语言的开发经验</li> <li>掌握 NodeJS 核心模块的和常见中间件 (如 Express) 的使用</li> </ol> <p><strong>后端实习生</strong> 任职要求： 1.计算机或相关专业本科以上学历 2.有nodejs/javascript/python/c++等语言开发经验</p> <ol> <li>熟悉数据结构和算法 4.掌握关系数据库开发设计，掌握 SQL，熟练使用 MySQL/PostgreSQL 中的一种</li> </ol> <h2>简历联系：yangfeng@gagogroup.com 地址：北京海淀中关村 网址：<a href=\"http://www.gagogroup.com\">www.gagogroup.com</a></h2> <p>佳格是一家通过环境和农业大数据收集、处理、分析和可视化系统，提供环境和农业解决方案的大数据应用公司。 【团队】 核心研发团队来自于美国加州硅谷，曾就职于美国国家航空航天局、美国能源部国家实验室、ERM公司、百度、孟山都等全球知名网络和跨国农业企业。 【我们做什么】 佳格利用中、美和欧洲等数十颗卫星和无人机实时采集地面和气象数据，整合土壤、地块、作物、农资等全方位信息，通过拥有自主知识产权的图像解析和数据分析算法，实现面积测算、适宜区规划、生产周期测算、产量预估、病虫害防治指导、作物植保、灌溉方案、农机调配、农业金融等全产业链数据支持和管理级服务。佳格还通过数据帮助客户进行标准化生产，实现生产全程可追溯，助力食品安全。 【薪资福利】 每年两次调薪 期权 年休假10天起 五险一金 午餐补助 交通补助 下午茶 水果零食供应 B轮发展中，欢迎您来与我们一起往前冲~</p> </div>\",\ntitle: \"【北京】我们需要有内涵的【后端工程师】佳格大数据关注环境与农业\",\nlast_reply_at: \"2016-12-01T06:53:10.084Z\",\ngood: false,\ntop: false,\nreply_count: 0,\nvisit_count: 32,\ncreate_at: \"2016-12-01T06:53:10.084Z\",\nauthor: - {\nloginname: \"yf-gago\",\navatar_url: \"https://avatars.githubusercontent.com/u/16298588?v=3&s=120\"\n}\n},\n- {\nid: \"583fb39027d001d606ac1b29\",\nauthor_id: \"5818acd7cf18d0333412d3bd\",\ntab: \"ask\",\ncontent: \"<div class=\"markdown-text\"><p>app.js里引入 <img src=\"//dn-cnode.qbox.me/FlmZwutLvYs_4Wd7L9H2IU1m1hVe\" alt=\"untitled1.png\"> 配置 <img src=\"//dn-cnode.qbox.me/FpSrse6oODhGTZwgVM_gcHpUrS-v\" alt=\"untitled4.png\"> 下面的路由 <img src=\"//dn-cnode.qbox.me/FsanzP9BZi5j37X4GFq43LfEY27F\" alt=\"untitled3.png\"> 到了路由目录的index.js <img src=\"//dn-cnode.qbox.me/FgYrdikr92x9eYq84AafKq6rAgVU\" alt=\"untitled6.png\"> 然后比如signin.js <img src=\"//dn-cnode.qbox.me/Fjfbh07ebeId45_u9jeMR4NW8aYc\" alt=\"untitled7.png\"> 这里表单提交后获取的req.body是个空对象，请问哪里有问题，谢谢</p> </div>\",\ntitle: \"body-parser使用问题，req.body为空对象\",\nlast_reply_at: \"2016-12-01T06:49:14.394Z\",\ngood: false,\ntop: false,\nreply_count: 4,\nvisit_count: 77,\ncreate_at: \"2016-12-01T05:22:24.508Z\",\nauthor: - {\nloginname: \"Dachow\",\navatar_url: \"https://avatars.githubusercontent.com/u/11835233?v=3&s=120\"\n}\n},\n- {\nid: \"57494543fd93c1011f94abf7\",\nauthor_id: \"57494041754d17df1e44dacc\",\ntab: \"ask\",\ncontent: \"<div class=\"markdown-text\"><p>我在做一个员工系统，录入员工信息后存入mongodb，然后需要做一个数据统计，生成excel表格，包括个人详细信息和统计，领导点击下载时马上统计并生成（实时统计生成），有什么较好的解决方案吗</p> </div>\",\ntitle: \"如何使用nodejs统计数据并导出excel表格\",\nlast_reply_at: \"2016-12-01T06:31:23.923Z\",\ngood: false,\ntop: false,\nreply_count: 10,\nvisit_count: 1600,\ncreate_at: \"2016-05-28T07:14:11.957Z\",\nauthor: - {\nloginname: \"AlanEdison\",\navatar_url: \"https://avatars.githubusercontent.com/u/16950589?v=3&s=120\"\n}\n},\n- {\nid: \"583105600249714d79d41b15\",\nauthor_id: \"567bb910a056d3460780577b\",\ntab: \"ask\",\ncontent: \"<div class=\"markdown-text\"><p>看了<a href=\"http://jlongster.com/Backend-Apps-with-Webpack--Part-I\">Backend Apps with Webpack (Part I)</a>，照着用\"webpack -p\"命令打包ES6的Nodejs后台程序后报错不识别ES6的语法。因为高版本Nodejs已经支持大部分ES6了，所以不想把ES6转ES5来运行。问下各位大神有什么办法？</p> </div>\",\ntitle: \"如何使用webpack打包ES6的Nodejs后台程序\",\nlast_reply_at: \"2016-12-01T06:29:49.108Z\",\ngood: false,\ntop: false,\nreply_count: 5,\nvisit_count: 364,\ncreate_at: \"2016-11-20T02:07:28.292Z\",\nauthor: - {\nloginname: \"zyq5945\",\navatar_url: \"https://avatars.githubusercontent.com/u/6050413?v=3&s=120\"\n}\n},\n- {\nid: \"583ed84befa98d907a52824b\",\nauthor_id: \"580f8093cf18d0333412d1aa\",\ntab: \"ask\",\ncontent: \"<div class=\"markdown-text\"><p>cnode开源代码中，Controllers和Proxy这两个文件夹分别有什么用的，感觉功能是重复的</p> <p>来自酷炫的 <a href=\"https://github.com/TakWolf/CNode-Material-Design\">CNodeMD</a></p> </div>\",\ntitle: \"cnode社区代码问题\",\nlast_reply_at: \"2016-12-01T06:19:49.074Z\",\ngood: false,\ntop: false,\nreply_count: 5,\nvisit_count: 136,\ncreate_at: \"2016-11-30T13:46:51.200Z\",\nauthor: - {\nloginname: \"xnbbosco\",\navatar_url: \"https://avatars.githubusercontent.com/u/12964499?v=3&s=120\"\n}\n},\n- {\nid: \"583ce2ee27d001d606ac1a4a\",\nauthor_id: \"5437ff4da220049637e41930\",\ntab: \"job\",\ncontent: \"<div class=\"markdown-text\"><p>邮箱: <a href=\"mailto:kiliwalk@qq.com\">kiliwalk@qq.com</a> 微信: kiliwalk QQ: 314856076<br> 最好是长沙吧, 因为我是湖南人. 目前人在北京, 被北京房价伤了, 想回老家了. 当然其他地方也可以啦(还能比北京更伤我吗?). 方向其实无所谓了, 跨度不大应该都行</p> <h3>个人信息</h3> <ul> <li>2010年毕业于南京大学软件工程系, 已工作6年</li> <li>Github: <a href=\"https://github.com/kiliwalk\">kiliwalk</a> (<a href=\"https://github.com/kiliwalk\">https://github.com/kiliwalk</a>)</li> <li>一句话自评: 解决问题能力强, 善于学习与总结, 喜欢造轮子</li> </ul> <h3>技术背景</h3> <ul> <li>技术发展历程: java 1年 -> siebel 2年半 -> php 半年 -> nodejs 2年</li> <li>当前主要技术栈 <ul> <li>后端: nodejs, es7(babel), mocha, nginx, mysql, redis</li> <li>前端: react-native, react, webpack, html, css</li> <li>其他: osx(mbp), sublime text, visual studio code, centos linux, git/github/gitlab, eslint</li> </ul> </li> <li>使用过的: java, php, oracle, jquery, avalon, bootstrap, svn, siebel, ecstore, web service</li> <li>接触过的: python, lua, vb, c, oc</li> </ul> <h3>工作经历</h3> <p>这部分太长了, 就简单说了, 有意向的到时候发简历吧.</p> <ul> <li>独立完成过一个社交产品, 包括App/web/管理后台/后端接口等子系统. App主要使用react-native完成, web端使用react+webpack. 里面造了好几个轮子,像兼容express的更好地支持promise的一个中间件框架,一个集成异步/中间件/数据规范化的全局state管理器,一个扁平化的可配置性高的更好支持join字段的orm等等</li> <li>独立完成过一个微信服务号商城. 主要使用自己之前开发的一个类似siebel一样的可配置性的框架. 页面元素布局, model都是配置开发, 部分页面可以达到一键生成的效果,开发速度很快</li> <li>做过2年多siebel项目, 先后经历过北京移动/神华/国航/台湾智慧光网/海底捞等CRM系统开发. siebel里也有一个ecmascript子集实现, 所以无耻地讲, 也可以算是js经验吧:)</li> <li>其他就是一些php项目(ecstore电商平台的二次开发), java项目(在校和刚毕业创业那会)</li> </ul> </div>\",\ntitle: \"[求职] 6年工作经验, 最好是长沙, nodejs/js方向\",\nlast_reply_at: \"2016-12-01T05:52:30.681Z\",\ngood: false,\ntop: false,\nreply_count: 18,\nvisit_count: 327,\ncreate_at: \"2016-11-29T02:07:42.338Z\",\nauthor: - {\nloginname: \"kiliwak\",\navatar_url: \"https://avatars.githubusercontent.com/u/7612199?v=3&s=120\"\n}\n},\n- {\nid: \"582ef3256efc292b79ff0add\",\nauthor_id: \"563f57ff6d966e1a39996c32\",\ntab: \"job\",\ncontent: \"<div class=\"markdown-text\"><div><p><img src=\"//dn-cnode.qbox.me/FhG1rVDKWDWxOkTaLszMyTC6N7yQ\" alt=\"招聘banner.png\"></p> <p><img src=\"//dn-cnode.qbox.me/FnKTALYrMcltXurzbhl2rGax6V6M\" alt=\"1.jpg\"></p> <h3>关于智课</h3> <ul> <li>中国在线教育行业的旗舰企业，业务覆盖出国留学、四六级、考研、高考等内容</li> <li>百度投资，连接人与服务</li> <li>线上拥有智课网、极智批改网两大在线学习平台</li> <li>线下拥有北京、上海、杭州、深圳、香港、纽约等地的30多家O2O培训实体面授中心</li> <li>拥有近450万用户，行业顶级</li> <li>清晰的盈利模式，轻轻松松变现</li> </ul> <h3>环境&福利</h3> <ul> <li>绝对一流的薪资，18K起+期权，上不封顶</li> <li>全套macbook配置，代码写的飞起来</li> <li>免费水果、饮料、零食、旅游、商业保险、体检、按摩等各种福利</li> <li>除了年终奖，我们还有项目奖金，一秒变土豪</li> <li>每年若干次大型outing/出门开会，世界很大，我们要去看看</li> <li>每周举办篮球赛/足球赛/羽毛球赛，身体是革命的本钱</li> <li>自带健身房！脖子扭扭屁股扭扭，我们一起来做运动</li> <li>自带洗浴间！运动之后，岂能一身臭汗回家？</li> <li>自带游戏室！桌上足球、桌游、飞镖等，待你来战！</li> <li>高标准、高压力、高成长、高回报，少年，你可以活得年轻一些</li> <li>拒绝看老板脸色行事，做正确的事情，用事实说话，勇敢做自己</li> </ul> <h3>精彩瞬间</h3> <p>团队在三亚团建，一起享受蓝天白云大海 <img src=\"//dn-cnode.qbox.me/FnaQYIqMzQTKOM5c-3ryjdBfEPWm\" alt=\"4.jpg\"></p> <p>外国友人访问，全是很流弊的同学 <img src=\"//dn-cnode.qbox.me/FjIyo7gATmVbkSoiGVieMGoadpQ_\" alt=\"2.jpg\"></p> <p>同志们在野外打枪，呵呵哒 <img src=\"//dn-cnode.qbox.me/FvYXypgsO0hyULjdf2tYN1m5-KwQ\" alt=\"555.jpg\"></p> <p>满地铁的广告，咳咳，有钱任性 <img src=\"//dn-cnode.qbox.me/Fkr8e61ySBzW0OEenq2s3O4_uKzj\" alt=\"IMG_7471.JPG\"></p> <p>前几天儿童节的公司活动，可爱的蓝胖子 <img src=\"//dn-cnode.qbox.me/FpNsUu3senttqiixv8hspvGSl7XL\" alt=\"1.jpg\"></p> <h3>招聘职位</h3> <p>作为一家高速发展的互联网公司，我们的所有技术职位都很需要人，永远都对优秀的人才敞开大门。 不管你是【玩<strong>前端</strong>，玩<strong>后端</strong>，还是玩<strong>运维</strong>，或者玩<strong>架构</strong>】的，都欢迎投简历给我们，我们需要你！</p> <p>北京总部主要负责智课网、批改网的研发工作； 杭州研发部主要负责备考帝、小智云的研发工作；</p> <p>智课技术部门，几乎全部使用node做前端、后端、移动端开发，整体技术栈是react/redux/express/sequelize/docker等等。 所以你如果很喜欢node的话，想在这方面更多的进步、发展和交流的话，欢迎选择我们，我们已经积累了很多很多的干货。</p> <p>所有岗位的需求其实都很简单，只要你<strong>足够优秀</strong>！ 具体的职位要求可以看我们的招聘专题页，不过上面都是一些形式化的介绍，看看就好。</p> <h3>工作地点</h3> <p>北京总部：交大西门知行大厦2楼 杭州研发部：杭大路聚龙大厦B座2楼</p> <h3>内推邮箱</h3> <p>大家可以把简历发到下面的邮箱，牛X的同学可以直接甩我一个github或者blog地址 <a href=\"mailto:zhangyunnian@innobuddy.com\" target=\"_blank\">zhangyunnian@innobuddy.com</a></p> </div></div>\",\ntitle: \"【北京/杭州】智课网，寻找优秀的你！18K~36K，年终奖2-4个月，丰厚期权！\",\nlast_reply_at: \"2016-12-01T04:02:15.974Z\",\ngood: false,\ntop: false,\nreply_count: 39,\nvisit_count: 451,\ncreate_at: \"2016-11-18T12:25:09.889Z\",\nauthor: - {\nloginname: \"zhangliu\",\navatar_url: \"https://avatars.githubusercontent.com/u/5234349?v=3&s=120\"\n}\n},\n- {\nid: \"583f9694efa98d907a528262\",\nauthor_id: \"5427cf8235fe7e550ed4d401\",\ntab: \"ask\",\ncontent: \"<div class=\"markdown-text\"><p><img src=\"//dn-cnode.qbox.me/FtcFLfuV3CRKFLoFURAV02Y8CuuV\" alt=\"屏幕快照 2016-12-01 上午11.11.16.png\">我这样查找时是可以找到数据的， 但<img src=\"//dn-cnode.qbox.me/Ft88287mDhYswIijqiSKGfT4orAQ\" alt=\"屏幕快照 2016-12-01 上午11.12.46.png\">返回的数据是空。 console.dir(videokey)的确是‘leb’呀，（上面换成’leb’也可以查到）是不是这个数据类型不对？</p> <p>附：videokey是从mongodb中取的数据 mongodb中： “keyword”: “leb”, 我取的方法： videokey = arr[0].keyword</p> </div>\",\ntitle: \"nodeJs 中mongodb find条件\",\nlast_reply_at: \"2016-12-01T03:41:23.389Z\",\ngood: false,\ntop: false,\nreply_count: 5,\nvisit_count: 61,\ncreate_at: \"2016-12-01T03:18:44.559Z\",\nauthor: - {\nloginname: \"linghao2014\",\navatar_url: \"https://avatars.githubusercontent.com/u/8544531?v=3&s=120\"\n}\n},\n- {\nid: \"55755426c4e7fbea6e9a30c8\",\nauthor_id: \"5538a74691bdb6e41239d3a3\",\ntab: \"share\",\ncontent: \"<div class=\"markdown-text\"><p>在多进程使用过程中有时候需要在进程间共享缓存一些数据，比如：</p> <ul> <li>session数据</li> <li>数据库查询缓存</li> <li>有一定时效的信息，比如oauth使用的<code>access_token</code></li> </ul> <p>常规的缓存机制需要引入第三方模块，如memcached/redis等。<code>node-shared-cache</code>(<a href=\"https://github.com/kyriosli/node-shared-cache\">链接</a>)就是专门解决此类问题的轻量级方案。相比第三方模块，<code>node-shared-cache</code>的优势有：</p> <ul> <li>无需跨进程通讯，使用共享内存的方式，因而可以同步使用</li> <li>API简单，和操作普通js对象一样的使用方式</li> <li>超高性能，接近普通js对象操作的速度，每秒300w次查询</li> <li>支持持久化，进程退出后内容不会清空</li> </ul> <h2>使用方式</h2> <pre class=\"prettyprint\"><code>var cache = require('node-shared-cache'); var obj = new cache.Cache(\"test\", 557056); // setting property obj.foo = \"bar\"; // getting property console.log(obj.foo); // enumerating properties for(var k in obj); Object.keys(obj); // deleting property delete obj.foo; // writing objects is also supported obj.foo = {'foo': 'bar'}; // but original object reference is not saved var test = obj.foo = {'foo': 'bar'}; test === obj.foo; // false // circular reference is supported. test.self = test; obj.foo = test; // and saved result is also circular test = obj.foo; test.self === test; // true </code></pre><h2>原理</h2> <h3>共享内存</h3> <p>通过共享内存而不是socket的形式进行数据共享，确保最大性能</p> <h3>hashmap</h3> <p>以hashmap形式对数据进行索引，并支持遍历</p> <h3>LRU</h3> <p>以LRU算法对cache内容进行替换，确保最大命中效率</p> <h3>futex</h3> <p>以futex实现用户态互斥锁，避免内核陷入的同时保证数据完整性</p> <h3>binary json</h3> <p>以二进制形式对js对象进行序列化/反序列化，提高效率，并支持对象循环引用</p> </div>\",\ntitle: \"node-shared-cache: 跨cluster内存共享模块\",\nlast_reply_at: \"2016-12-01T03:40:38.320Z\",\ngood: true,\ntop: false,\nreply_count: 10,\nvisit_count: 1764,\ncreate_at: \"2015-06-08T08:36:54.062Z\",\nauthor: - {\nloginname: \"kyriosli\",\navatar_url: \"https://avatars.githubusercontent.com/u/1522145?v=3&s=120\"\n}\n},\n- {\nid: \"583f7f00d1257d4c0dffb063\",\nauthor_id: \"583f7dd5254727447987caea\",\ntab: \"ask\",\ncontent: \"<div class=\"markdown-text\"><p>开发工具使用的是WebStorm，代码如下(很简单的get百度的代码)： request.get(“<a href=\"http://www.baidu.com\">http://www.baidu.com</a>”, function (err, res, body) { console.log(body); }); 这段代码在window上跑起来，最后出来的结果都是乱码，例如：浣跨敤鐧惧害鍓嶅繀璇。 但是在Mac上却不会乱码。 项目编码都是UTF-8，请问有解决办法吗？</p> </div>\",\ntitle: \"Windows使用Request get页面的时候中文乱码，但是同样代码在另一台Mac上却不会乱码\",\nlast_reply_at: \"2016-12-01T03:19:10.770Z\",\ngood: false,\ntop: false,\nreply_count: 1,\nvisit_count: 74,\ncreate_at: \"2016-12-01T01:38:08.019Z\",\nauthor: - {\nloginname: \"xzm941012\",\navatar_url: \"https://avatars.githubusercontent.com/u/9962693?v=3&s=120\"\n}\n},\n- {\nid: \"583ef377d1257d4c0dffb04e\",\nauthor_id: \"5788a452b78759e813a57976\",\ntab: \"ask\",\ncontent: \"<div class=\"markdown-text\"><p>nodejs写的命令行工具 在windows上可以执行 mac上面提示env: node\\r: No such file or directory 有大大知道是什么原因吗</p> </div>\",\ntitle: \"nodejs写的命令行工具 在windows上可以执行 mac上面提示env: node\\r: No such file or directory\",\nlast_reply_at: \"2016-12-01T03:13:00.537Z\",\ngood: false,\ntop: false,\nreply_count: 1,\nvisit_count: 107,\ncreate_at: \"2016-11-30T15:42:47.196Z\",\nauthor: - {\nloginname: \"xu33\",\navatar_url: \"https://avatars.githubusercontent.com/u/1758354?v=3&s=120\"\n}\n},\n- {\nid: \"583ea8add1257d4c0dffb020\",\nauthor_id: \"583ea7c227d001d606ac1ae6\",\ntab: \"ask\",\ncontent: \"<div class=\"markdown-text\"><p>var express = require(‘express’);</p> <p>var app= express();</p> <p>//设置handlebars视图引擎 var handlebars = require(‘express3-handlebars’) handlebars.create({defaultLayout:‘main’}); app.engine(‘handlebars’,handlebars.engine); app.set(‘view engine’,‘handlebars’);</p> <p>app.set(‘port’,process.env.PORT||3000); app.use(express.static(__dirname + ‘/public’));</p> <p>app.get(’/’,function(req,res){ res.render(‘home’); });</p> <p>app.get(’/about’,function(req,res){ res.render(‘about’); })</p> <p>//404 page catch-all处理器(中间件) app.use(function(req,res){ res.status(404); res.render(‘404’); });</p> <p>//500 page 错误处理器中间件 app.use(function(err,req,res,next){ console.log(err.stack); <a href=\"//xn--expressres-ok5y.xn--setres-k76j.status\">//express的res.set和res.status</a>()方法替换node的res.writeHead()方法 res.status(500); res.render(‘500’); });</p> <p>app.listen(app.get(‘port’),function(){ console.log(‘express start on <a href=\"http://localhost\">http://localhost</a>:’ + app.get(‘port’) + ‘;press Ctrl-C to terminate’); });</p> <p><img src=\"//dn-cnode.qbox.me/Fkn5FAwwaWV2iKvuQeBtnYAJjqMj\" alt=\"FastStoneEditor.jpg\"></p> <p>这里抛出不能请求回调是什么意思?请问怎么解决?谢谢</p> </div>\",\ntitle: \"node+express throw new Error('callback function required');\",\nlast_reply_at: \"2016-12-01T03:04:53.547Z\",\ngood: false,\ntop: false,\nreply_count: 2,\nvisit_count: 61,\ncreate_at: \"2016-11-30T10:23:41.318Z\",\nauthor: - {\nloginname: \"labike\",\navatar_url: \"https://avatars.githubusercontent.com/u/15871933?v=3&s=120\"\n}\n},\n- {\nid: \"583d48e4efa98d907a5281b7\",\nauthor_id: \"570b551012def0933c43ac1b\",\ntab: \"ask\",\ncontent: \"<div class=\"markdown-text\"><p>最近在学习bluebird，哪位大哥能给个项目实例哈。～～～～</p> </div>\",\ntitle: \"求一个 express bluebird 项目实例。\",\nlast_reply_at: \"2016-12-01T02:43:15.616Z\",\ngood: false,\ntop: false,\nreply_count: 10,\nvisit_count: 293,\ncreate_at: \"2016-11-29T09:22:44.587Z\",\nauthor: - {\nloginname: \"linkenliu\",\navatar_url: \"https://avatars.githubusercontent.com/u/17923055?v=3&s=120\"\n}\n},\n- {\nid: \"57fb47da487e1e4578afb388\",\nauthor_id: \"5779db49fb1d649f05fec70b\",\ntab: \"share\",\ncontent: \"<div class=\"markdown-text\"><h2>个人感受</h2> <blockquote> <p>vue2.0 10月初发布正式版了，官方的插件，vuex,vue-router同样升级到2.0了，据说2.0性能比react高。</p> </blockquote> <blockquote> <p>重构过程比较顺利，没什么困难，最主要是生命周期名变更，还有vuex的小变动，可以使用vue-migration-helper帮助升级，有比较友好的提示。</p> </blockquote> <blockquote> <p>vue2.0如果性能如网上所说的那么快，我建议使用vue,我比较喜欢vue的语法。</p> </blockquote> <h2>vue2.0参考资料</h2> <blockquote> <p>官方文档http://vuejs.org/guide/ 中文翻译http://vuefe.cn/ vue-router2文档 <a href=\"http://router.vuejs.org/zh-cn/index.html\">http://router.vuejs.org/zh-cn/index.html</a> vuex2.0文档 <a href=\"http://vuex.vuejs.org/en/index.html\">http://vuex.vuejs.org/en/index.html</a> vue-resourece <a href=\"https://github.com/vuejs/vue-resource\">https://github.com/vuejs/vue-resource</a> 滑动广告插件 <a href=\"https://github.com/surmon-china/vue-awesome-swiper\">https://github.com/surmon-china/vue-awesome-swiper</a></p> </blockquote> <h2>github地址</h2> <blockquote> <p><a href=\"https://github.com/zhengguorong/maizuo/tree/master/vuexMaizuo2\">https://github.com/zhengguorong/maizuo/tree/master/vuexMaizuo2</a></p> </blockquote> <h2>演示效果</h2> <p><img src=\"http://test-10019075.cos.myqcloud.com/vue%E5%8D%96%E5%BA%A7%E7%BD%91.gif\" alt></p> </div>\",\ntitle: \"使用vue2.0+vuex2.0+vue-router2.0重构的卖座网，如果对你有帮助，就给个star吧！\",\nlast_reply_at: \"2016-12-01T02:35:38.741Z\",\ngood: false,\ntop: false,\nreply_count: 13,\nvisit_count: 2772,\ncreate_at: \"2016-10-10T07:48:42.816Z\",\nauthor: - {\nloginname: \"zhengguorong\",\navatar_url: \"https://avatars.githubusercontent.com/u/2757932?v=3&s=120\"\n}\n},\n- {\nid: \"561b51252fb53d5b4f232a2b\",\nauthor_id: \"547c35030ae47dec03aa2939\",\ntab: \"share\",\ncontent: \"<div class=\"markdown-text\"><h2><strong>Express介绍</strong></h2> <p>npm提供了大量的第三方模块，其中不乏许多Web框架，比如我们本章节要讲述的一个轻量级的Web框架 ——— Express。</p> <p>Express是一个简洁、灵活的node.js Web应用开发框架, 它提供一系列强大的功能，比如：模板解析、静态文件服务、中间件、路由控制等等,并且还可以使用插件或整合其他模块来帮助你创建各种 Web和移动设备应用,是目前最流行的基于Node.js的Web开发框架，并且支持Ejs、jade等多种模板，可以快速地搭建一个具有完整功能的网站。</p> <p>好，下面我们就开始吧！</p> <p><strong>1. NPM安装</strong></p> <pre class=\"prettyprint\"><code>npm install express </code></pre><p><strong>2. 获取、引用</strong></p> <pre class=\"prettyprint\"><code>var express = require('express'); var app = express(); </code></pre><p>通过变量“app”我们就可以调用express的各种方法了，好戏刚刚开始，继续加油吧！</p> <h2><strong>创建应用</strong></h2> <p>认识了Express框架，我们开始创建我们的第一个express应用。</p> <p>在我们的默认项目主文件app.js添加如下内容：</p> <pre class=\"prettyprint\"><code>var express = require('express'); var app = express(); app.get('/', function (request, response) { 　　response.send('Hello World!'); }); app.listen(80); </code></pre><p>说明：在后面课程学习中，我们会统一使用80端口用于监听请求。</p> <p>添加完毕之后，通过右侧栏的“测试地址”来查看浏览器内容，当看到“Hello World!”内容就表明一个简单的express应用已经创建成功了。</p> <h2><strong>get请求</strong></h2> <p>前面我们实现了一个简单的express应用，下面我们就开始具体讲述它的具体实现，首先我们先来学习Express的常用方法。</p> <p>get方法 —— 根据请求路径来处理客户端发出的GET请求。</p> <p>格式：app.get(path,function(request, response));</p> <p>path为请求的路径，第二个参数为处理请求的回调函数，有两个参数分别是request和response，代表请求信息和响应信息。</p> <p>如下示例：</p> <pre class=\"prettyprint\"><code>var express = require('express'); var app = express(); app.get('/', function(request, response) { 　　response.send('Welcome to the homepage!'); }); app.get('/about', function(request, response) { 　　response.send('Welcome to the about page!'); }); app.get(\"*\", function(request, response) { 　　response.send(\"404 error!\"); }); app.listen(80); </code></pre><p>上面示例中，指定了about页面路径、根路径和所有路径的处理方法。并且在回调函数内部，使用HTTP回应的send方法，表示向浏览器发送一个字符串。</p> <p>参照以上代码，试试自己设定一个get请求路径，然后浏览器访问该地址是否可以请求成功。</p> <h2><strong>Middleware<中间件></strong></h2> <p><strong>1.什么是中间件？</strong></p> <p>中间件(middleware)就是处理HTTP请求的函数，用来完成各种特定的任务，比如检查用户是否登录、分析数据、以及其他在需要最终将数据发送给用户之前完成的任务。 它最大的特点就是，一个中间件处理完，可以把相应数据再传递给下一个中间件。</p> <p><strong>2.一个不进行任何操作、只传递request对象的中间件</strong>，大概是这样：</p> <pre class=\"prettyprint\"><code>function Middleware(request, response, next) { 　　next(); } </code></pre><p>上面代码的next为中间件的回调函数。如果它带有参数，则代表抛出一个错误，参数为错误文本。</p> <pre class=\"prettyprint\"><code>function Middleware(request, response, next) { 　　next('出错了！'); } </code></pre><p>抛出错误以后，后面的中间件将不再执行，直到发现一个错误处理函数为止。如果没有调用next方法,后面注册的函数也是不会执行的。</p> <h2><strong>all函数的基本用法</strong></h2> <p>和get函数不同app.all()函数可以匹配所有的HTTP动词，也就是说它可以过滤所有路径的请求，如果使用all函数定义中间件，那么就相当于所有请求都必须先通过此该中间件。</p> <p>格式：app.all(path,function(request, response));</p> <p>如下所示，我们使用all函数在请求之前设置响应头属性。</p> <pre class=\"prettyprint\"><code>var express = require(\"express\"); var app = express(); app.all(\"*\", function(request, response, next) { 　　response.writeHead(200, { \"Content-Type\": \"text/html;charset=utf-8\" }); //设置响应头属性值 next(); }); app.get(\"/\", function(request, response) { 　　response.end(\"欢迎来到首页!\"); }); app.get(\"/about\", function(request, response) { 　　response.end(\"欢迎来到about页面!\"); }); app.get(\"*\", function(request, response) { 　　response.end(\"404 - 未找到!\"); }); app.listen(80); </code></pre><p>上面代码参数中的“*”表示对所有路径有效，这个方法在给特定前缀路径或者任意路径上处理时会特别有用，不管我们请求任何路径都会事先经过all函数。</p> <p>如果所示，如果我们跳过all函数又会怎么样呢，自己动手试一试？</p> <h2><strong>use基本用法1</strong></h2> <p>use是express调用中间件的方法，它返回一个函数。</p> <p>格式：app.use([path], function(request, response, next){});</p> <p>//可选参数path默认为\"/\"。</p> <p><strong>1. 使用中间件</strong></p> <pre class=\"prettyprint\"><code>app.use(express.static(path.join(__dirname, '/'))); </code></pre><p>如上呢，我们就使用use函数调用express中间件设定了静态文件目录的访问路径(这里假设为根路径)。</p> <p><strong>2. 如何连续调用两个中间件呢，如下示例：</strong></p> <pre class=\"prettyprint\"><code>var express = require('express'); var app = express(); app.use(function(request, response, next){ console.log(\"method：\"+request.method+\" ==== \"+\"url：\"+request.url); next(); }); app.use(function(request, response){ response.writeHead(200, { \"Content-Type\": \"text/html;charset=utf-8\" }); response.end('示例：连续调用两个中间件'); }); app.listen(80); </code></pre><p>回调函数的next参数，表示接受其他中间件的调用，函数体中的next()，表示将请求数据传递给下一个中间件。</p> <p>上面代码先调用第一个中间件，在控制台输出一行信息，然后通过next()，调用第二个中间件，输出HTTP回应。由于第二个中间件没有调用next方法，所以req对象就不再向后传递了。</p> <h2><strong>use基本用法2</strong></h2> <p>use方法不仅可以调用中间件，还可以根据请求的网址，返回不同的网页内容，如下示例：</p> <pre class=\"prettyprint\"><code>var express = require(\"express\"); var app = express(); app.use(function(request, response, next) { 　　if(request.url == \"/\") { 　　　　response.send(\"Welcome to the homepage!\"); 　　}else { 　　　　next(); 　　} }); app.use(function(request, response, next) { 　　if(request.url == \"/about\") { 　　　　response.send(\"Welcome to the about page!\"); 　　}else { 　　　　next(); 　　} }); app.use(function(request, response) { 　　response.send(\"404 error!\"); }); app.listen(80); </code></pre><p>上面代码通过request.url属性，判断请求的网址，从而返回不同的内容。</p> <h2><strong>回调函数</strong></h2> <p><a href=\"http://www.hubwiz.com\">Express</a>回调函数有两个参数，分别是request(简称req)和response(简称res)，request代表客户端发来的HTTP请求，request代表发向客户端的HTTP回应，这两个参数都是对象。示例如下:</p> <pre class=\"prettyprint\"><code>function(req, res) { }); </code></pre><p>在后面的学习中，我们会经常和它打交道，牢牢记住它的格式吧！</p> <h2><strong>获取主机名、路径名</strong></h2> <p>今天我们就先来学习如何使用req对象来处理客户端发来的HTTP请求。</p> <ol> <li> <p>req.host返回请求头里取的主机名(不包含端口号)。</p> </li> <li> <p>req.path返回请求的URL的路径名。</p> </li> </ol> <p>如下示例：</p> <pre class=\"prettyprint\"><code>var express = require('express'); var app = express(); app.get(\"*\", function(req, res) { 　　console.log(req.path); 　　res.send(\"req.host获取主机名，req.path获取请求路径名!\"); }); app.listen(80); </code></pre><p>试一试在浏览器中输入任意一个请求路径，通过req查看主机名或请求路径。</p> <h2><strong>query基本用法</strong></h2> <p>query是一个可获取客户端get请求路径参数的对象属性，包含着被解析过的请求参数对象，默认为{}。</p> <pre class=\"prettyprint\"><code>var express = require('express'); var app = express(); app.get(\"*\", function(req, res) { 　　console.log(req.query.参数名); 　　res.send(\"测试query属性!\"); }); app.listen(80); </code></pre><p>通过req.query获取get请求路径的对象参数值。</p> <p>格式：req.query.参数名；请求路径如下示例：</p> <p>例1： /search?n=Lenka</p> <pre class=\"prettyprint\"><code>req.query.n // \"Lenka\" </code></pre><p>例2： /shoes?order=desc&shoe[color]=blue&shoe[type]=converse</p> <pre class=\"prettyprint\"><code>req.query.order // \"desc\" req.query.shoe.color // \"blue\" req.query.shoe.type // \"converse\" </code></pre><p>试一试get请求一个带参数路径，使用“req.query.参数名”方法获取请求参数值。</p> <h2><strong>param基本用法</strong></h2> <p>和属性query一样，通过req.param我们也可以获取被解析过的请求参数对象的值。</p> <p>格式：req.param(“参数名”)；请求路径如下示例：</p> <p>例1： 获取请求根路径的参数值，如/?n=Lenka，方法如下：</p> <pre class=\"prettyprint\"><code>var express = require('express'); var app = express(); app.get(\"/\", function(req, res) { 　　console.log(req.param(\"n\")); //Lenka 　　res.send(\"使用req.param属性获取请求根路径的参数对象值!\"); }); app.listen(80); </code></pre><p>例2：我们也可以获取具有相应路由规则的请求对象，假设路由规则为 /user/:name/，请求路径/user/mike,如下：</p> <pre class=\"prettyprint\"><code>app.get(\"/user/:name/\", function(req, res) { 　　console.log(req.param(\"name\")); //mike 　　res.send(\"使用req.param属性获取具有路由规则的参数对象值!\"); }); </code></pre><p>PS：所谓“路由”，就是指为不同的访问路径，指定不同的处理方法。</p> <p>看了上面的示例，试一试使用req.param属性解析一个请求路径对象，并获取请求参数值。</p> <h2><strong>params基本用法</strong></h2> <p>和param相似，但params是一个可以解析包含着有复杂命名路由规则的请求对象的属性。</p> <p>格式：req.params.参数名；</p> <p>例1. 如上课时请求根路径的例子，我们就可以这样获取，如下：</p> <pre class=\"prettyprint\"><code>var express = require('express'); var app = express(); app.get(\"/user/:name/\", function(req, res) { 　　console.log(req.params.name); //mike 　　res.send(\"使用req.params属性获取具有路由规则的参数对象值!\"); }); app.listen(80); </code></pre><p>查看运行结果，和param属性功能是一样的，同样获取name参数值。</p> <p>例2：当然我们也可以请求复杂的路由规则，如/user/:name/:id，假设请求地址为：/user/mike/123，如下：</p> <pre class=\"prettyprint\"><code>app.get(\"/user/:name/:id\", function(req, res) { 　　console.log(req.params.id); //\"123\" 　　res.send(\"使用req.params属性复杂路由规则的参数对象值!\"); }); </code></pre><p>对于请求地址具有路由规则的路径来说，属性params比param属性是不是又强大了那么一点点呢！</p> <h2><strong>send基本用法</strong></h2> <p>send()方法向浏览器发送一个响应信息，并可以智能处理不同类型的数据。格式如下： res.send([body|status], [body]);</p> <p>1.当参数为一个String时，Content-Type默认设置为\"text/html\"。</p> <pre class=\"prettyprint\"><code>res.send('Hello World'); //Hello World </code></pre><p>2.当参数为Array或Object时，Express会返回一个JSON。</p> <pre class=\"prettyprint\"><code>res.send({ user: 'tobi' }); //{\"user\":\"tobi\"} res.send([1,2,3]); //[1,2,3] </code></pre><p>3.当参数为一个Number时，并且没有上面提到的任何一条在响应体里，Express会帮你设置一个响应体，比如：200会返回字符\"OK\"。</p> <pre class=\"prettyprint\"><code>res.send(200); // OK res.send(404); // Not Found res.send(500); // Internal Server Error </code></pre><p>send方法在输出响应时会自动进行一些设置，比如HEAD信息、HTTP缓存支持等等。</p> <p>更多示例和在线练习可以去这里看看： <a href=\"http://www.hubwiz.com/course/544db33888dba01ef09d0682/\">http://www.hubwiz.com/course/544db33888dba01ef09d0682/</a></p> </div>\",\ntitle: \"nodejs 框架之express\",\nlast_reply_at: \"2016-12-01T02:23:42.854Z\",\ngood: true,\ntop: false,\nreply_count: 28,\nvisit_count: 6636,\ncreate_at: \"2015-10-12T06:20:21.080Z\",\nauthor: - {\nloginname: \"2596887568\",\navatar_url: \"https://avatars.githubusercontent.com/u/9349200?v=3&s=120\"\n}\n},\n- {\nid: \"58297c696c4502be6ed87bc6\",\nauthor_id: \"4f41f931c643fe2210057377\",\ntab: \"job\",\ncontent: \"<div class=\"markdown-text\"><h1>芒果tv技术中心前端研发部招聘</h1> <p>芒果TV前端研发部是一个新团队，做些基础的工具、系统研发工作，目的是让工作在产品项目一线的前端同事们轻松起来。</p> <p>首先有很多工具需要被开发出来，感谢 NodeJS 方便了我们开展这个方面的工作。当前我们最主要在开发及维护的工具，用来提供前端的开发环境以及合并压缩，打包发布。嗯，算某种程度上的又一个轮子。总之未来一年，团队有大部分的工作任务都在这个上面，招聘行为从而触发：</p> <h2>前端基础研发岗位（工具开发方向）</h2> <ol> <li>工作内容就是上面那段所述</li> <li>理论上不招聘没有相关工作经验的人，但其实你可以说服我们的</li> </ol> <p>工具的存在，让前端行为标准化，然后就可以公共化很多东西了。我们现在正在标准并公共的东西是网站的 UI 组件，所以对于能写出标准化的 HTML、CSS，以及有良好的 JS 写作习惯的人，我们是极度渴求的。</p> <h2>前端基础研发岗位（UI组件方向）</h2> <ol> <li>与现有团队一起制定UI组件的开发规范</li> <li>编写符合规范的UI组件</li> </ol> <p>我们还有几套服务系统也在开发中，比较重要的有两个：一是项目的版本管理与发布系统，另一个是前端页面的性能监控系统。都是基于 NodeJS，然后按 ES6 的规范，利用 Babel 来编译。系统开发人员很显然是需要有后端的开发经验，当然对 Linux 服务器环境也是得有所了解才行。至于 ES6，最好是对 Promise、Generator 或者 Async/Await 已有了解，因为我们目前其实蛮依赖这些东西，使异步的代码看起来更让人易懂。当然，爱学肯码才是重点。</p> <h2>前端基础研发岗位（后端服务系统开发方向）</h2> <ol> <li>基本要求还是请看上面</li> <li>如果对网站性能优化有深入的了解，尤其赞</li> <li>具备基本的HTML与CSS的编写知识，毕竟系统也是得包括UI的</li> </ol> <h2>岗位薪资说明</h2> <p>目前团队初创，需要能带领小组的高级开发老师，也需要能完成被指定任务工作的开发者。所以上面所有岗位都会有两个级别的岗位开放：</p> <ol> <li>高级开发工程师 15k - 20k</li> <li>开发工程师 10k - 15k</li> </ol> <hr> <p>简历请发至 <a href=\"mailto:xuelian@mgtv.com\">xuelian@mgtv.com</a></p> </div>\",\ntitle: \"[长沙] 芒果tv技术中心前端研发部招聘\",\nlast_reply_at: \"2016-12-01T01:53:15.289Z\",\ngood: false,\ntop: false,\nreply_count: 11,\nvisit_count: 392,\ncreate_at: \"2016-11-14T08:57:13.188Z\",\nauthor: - {\nloginname: \"xydudu\",\navatar_url: \"//gravatar.com/avatar/03c5b558f99d32e214f614ff032a8d48?size=48\"\n}\n},\n- {\nid: \"583f7e1927d001d606ac1b11\",\nauthor_id: \"57d4c2b449e399fd386e1986\",\ntab: \"share\",\ncontent: \"<div class=\"markdown-text\"><p>good morning!<br /><br /><a href=\"https://github.com/shinygang/Vue-cnodejs\">I‘m webapp-cnodejs-vue</a></p> </div>\",\ntitle: \"web front ender\",\nlast_reply_at: \"2016-12-01T01:34:17.387Z\",\ngood: false,\ntop: false,\nreply_count: 0,\nvisit_count: 67,\ncreate_at: \"2016-12-01T01:34:17.387Z\",\nauthor: - {\nloginname: \"truexin\",\navatar_url: \"https://avatars.githubusercontent.com/u/18238072?v=3&s=120\"\n}\n},\n- {\nid: \"583cedadd1257d4c0dffaf8e\",\nauthor_id: \"50d91f29a7e6c6171a1c0392\",\ntab: \"ask\",\ncontent: \"<div class=\"markdown-text\"><p>两者无论写法，还是执行顺序，也没啥区别啊，区别是啥？？？</p> <pre class=\"prettyprint\"><code>var app = require('express')(); app.use(function myMiddleware(req, res, next) { res.write('Hello world.'); next(); }); app.use(function mySecondMiddleware(req, res) { res.write('\\nI am a second middleware.'); res.end(); }); var app = require('koa')(); app.use(function* myMiddleware(next) { this.response.body = 'Hello world.'; yield next; }); app.use(function* mySecondMiddleware() { this.response.body += '\\nI am a second middleware.'; });</code></pre></div>\",\ntitle: \"express和koa的middleware没区别吧？\",\nlast_reply_at: \"2016-12-01T00:54:13.284Z\",\ngood: false,\ntop: false,\nreply_count: 6,\nvisit_count: 271,\ncreate_at: \"2016-11-29T02:53:33.488Z\",\nauthor: - {\nloginname: \"rwing\",\navatar_url: \"//gravatar.com/avatar/af73bb3077950d1c01e19d5e6a1a1281?size=48\"\n}\n},\n- {\nid: \"583c5d9fba57ffba06c24a89\",\nauthor_id: \"574baf9e991011691ef17ca6\",\ntab: \"share\",\ncontent: \"<div class=\"markdown-text\"><h2>为啥要搞这玩意？</h2> <p>今天老板提了需求，要在服务端生成邀请卡，嗯…，简单的说就是把要这张： <img src=\"//dn-cnode.qbox.me/Fvbe3rk65Xd6tLEJcYSgQLt6J2up\" alt=\"webwxgetmsgimg.jpg\"> 变成差多这样的： <img src=\"//dn-cnode.qbox.me/FpN6RbDjbnz2fzxsqo-PinRK-5LX\" alt=\"card.png\"> 后端搞ruby的哥们搞了个html转图片，哭诉说转得太慢了，我就把这坑接下来了 所以睡前就倒腾了下，搞了个简单的实现</p> <h2>解决思路</h2> <p>文字转svg -> svg转png -> 合并图片</p> <h2>相关轮子</h2> <ul> <li>images Node.js 轻量级跨平台图像编解码库，不需要额外安装依赖</li> <li>text-to-svg 文字转svg</li> <li>svg2png svg转png图片</li> </ul> <h2>示例代码</h2> <pre class=\"prettyprint\"><code>'use strict'; const fs = require('fs'); const images = require('images'); const TextToSVG = require('text-to-svg'); const svg2png = require(\"svg2png\"); const Promise = require('bluebird'); Promise.promisifyAll(fs); const textToSVG = TextToSVG.loadSync('fonts/文泉驿微米黑.ttf'); const sourceImg = images('./i/webwxgetmsgimg.jpg'); const sWidth = sourceImg.width(); const sHeight = sourceImg.height(); const svg1 = textToSVG.getSVG('魏长青-人人讲App', { x: 0, y: 0, fontSize: 24, anchor: 'top', }); const svg2 = textToSVG.getSVG('邀请您参加', { x: 0, y: 0, fontSize: 16, anchor: 'top', }); const svg3 = textToSVG.getSVG('人人讲课程', { x: 0, y: 0, fontSize: 32, anchor: 'top', }); Promise.coroutine(function* generateInvitationCard() { const targetImg1Path = './i/1.png'; const targetImg2Path = './i/2.png'; const targetImg3Path = './i/3.png'; const targetImg4Path = './i/qrcode.jpg'; const [buffer1, buffer2, buffer3] = yield Promise.all([ svg2png(svg1), svg2png(svg2), svg2png(svg3), ]); yield Promise.all([ fs.writeFileAsync(targetImg1Path, buffer1), fs.writeFileAsync(targetImg2Path, buffer2), fs.writeFileAsync(targetImg3Path, buffer3), ]); const target1Img = images(targetImg1Path); const t1Width = target1Img.width(); const t1Height = target1Img.height(); const offsetX1 = (sWidth - t1Width) / 2; const offsetY1 = 200; const target2Img = images(targetImg2Path); const t2Width = target2Img.width(); const t2Height = target2Img.height(); const offsetX2 = (sWidth - t2Width) / 2; const offsetY2 = 240; const target3Img = images(targetImg3Path); const t3Width = target3Img.width(); const t3Height = target3Img.height(); const offsetX3 = (sWidth - t3Width) / 2; const offsetY3 = 270; const target4Img = images(targetImg4Path); const t4Width = target4Img.width(); const t4Height = target4Img.height(); const offsetX4 = (sWidth - t4Width) / 2; const offsetY4 = 400; images(sourceImg) .draw(target1Img, offsetX1, offsetY1) .draw(target2Img, offsetX2, offsetY2) .draw(target3Img, offsetX3, offsetY3) .draw(target4Img, offsetX4, offsetY4) .save('./i/card.png', { quality : 90 }); })().catch(e => console.error(e)); </code></pre><h2>注意事项</h2> <ul> <li>text-to-svg需要中文字体的支持，不然中文会乱码</li> </ul> <p>在我的破电脑上执行一次只花了500多毫秒，感觉足够了，分享出来希望能给大家一个参照 厚脸皮的问一下，能加个精不？😂</p> </div>\",\ntitle: \"node文字转图片\",\nlast_reply_at: \"2016-11-30T23:22:37.701Z\",\ngood: true,\ntop: false,\nreply_count: 9,\nvisit_count: 506,\ncreate_at: \"2016-11-28T16:38:55.229Z\",\nauthor: - {\nloginname: \"Amastyer\",\navatar_url: \"https://avatars.githubusercontent.com/u/12872492?v=3&s=120\"\n}\n},\n- {\nid: \"5487fe00fa1171ca10c11c30\",\nauthor_id: \"5062b5ea01d0b801483ae4ff\",\ntab: \"job\",\ncontent: \"<div class=\"markdown-text\"><h4>职位和福利有变动，请前往 <a href=\"https://cnodejs.org/topic/54c58bc40d075f173d433f23\">度假办公-弹性工作- 来【美国硅谷】就是这么任性</a></h4> <h2>我们需要什么样的人？</h2> <p>技术大牛？市场专家？管理奇才？</p> <p>落花萍飞盖满地，流水飘零难留情。这情绪化的世界，每一刻都截然不同。</p> <p>一个公司，冥冥之中有时势走向，漫不经心的结集，也有步步设计，严谨流程。外与内，某个发呆的决策，某个深夜两点的发布，都可能导致公司一蹶不振或者一炮走红，前面说的是命势，而后面则管理，所以有人看项目，有人看人品，有人看 Team，有人看背景，不一而从也不一而终。则曰：白头山水间，亦云：坐车观沧海。</p> <p>扯的听不懂，一会就能刨出几个八要九不准的，落俗难免，但雅也好，俗也罢，白猫黑猫挑好猫。</p> <h3>以下进入正常人思维</h3> <p>举例说技术类，现在 Moveha 缺什么样的技术人才？答案有二：</p> <h5>一、什么都缺</h5> <p>测试工程师，安全工程师，数据库底层运维工程师、前端后端工程师。</p> <h5>二、什么都不缺</h5> <p>眼下是 A 轮前夕，一个合理较好的估值是目标，也是途径，但不是目的，产品的定性，Team 做事风格和努力的方向，这些基本上形成了评估的材料，至于用户量，成交量，后台架构，安全等级，所有这些都没 team 本身来的关紧，能保持住较低的成本往前平稳推进，技术满足需求就能行。</p> <p>这不等于说了废话，不过拨开来，烂俗点，就是项目推进的方向和核心 Team 努力的程度，往哪里推进，使出的劲，拿到结果只是有点明朗的时间问题，那么由这个引开再来看招人：</p> <ol> <li>认同 - 要认同这个 Idea，有感情的投入，说白了，就是提到这个项目就莫名走心，如果不认同，也就没什么内驱动，就贯彻不彻底</li> <li>勤奋 - 或者说努力程度，对初创团队，勤奋能 Cover 掉很多成本，成本就意味着坚持能多久，活下去才有机会雄起</li> <li>学习 - 其实也可以说是主动意识，项目是新的，Team 是新的，每个人都要跟着 Team 一起成长，这种成长是环境带来的机会，更是自己权利行使，多分付出，多分收获</li> </ol> <p>认同、勤奋、学习 这三个算是扯蛋的推演，但放到每个人身上确实是具体存在的问题，只是优先级各有不同，对我而言，学习是第一要务 - 跟 Team 一起成长，这并不是说要做多少功能，要发布上线多频繁，其实是说在眼下的 Team 成本和投入下，如何让自己不断的满足 Team 的需求，这不意味着吃老本，也不意味着叠任务，其实是在需求和自我成长之间在不断的评估和改进，这个不是一蹴而就，而是每一分钟，这也不是代码技能，而是方方面面，比如 接人待物，比如 演讲表达，比如 产品研究，它更不是一个具体的任务，而是一个虚化的，分支岔结的，林林总总的过程，而这个过程需要热情，热情的好处不仅在于感召自己，更能感染别人，这种感染力，是技术或者业务本身根本带不来的，它是一种内心情绪的表达，一种向上正方向的推动，烂俗点，可以说是正能量。</p> <p>所以，无论是实习还是正式员工，在这个 Team 里面，无论刚开始技术好坏，一旦融入进来，我希望能 <strong><em>热情的主动的</em></strong> 活在 Team 中，它不仅关系到个人的成长，更关系到整个 Idea 的实现程度，整个 Team 的专业程度，关系到公司的安身立命。</p> <p>但是，光谈理想不谈钱无异于耍流氓，为什么几乎所有的创业团队，上来都问你，你认同这个 idea 么，你对这个感兴趣么，你觉得做这个开心么，其实他的潜台词是，亲，我们没多少钱，你愿意到一个没钱的团队做事么？</p> <p>曾经一度，我对这种开场白很不屑，对，我当时绝逼觉得，不叼他也有不叼他的资本，但我疏忽了一件事，除了钱，这个 Team，这个 Idea 还能带给我什么？我从来没这样想过，所以我也错过了无数的机会，错过这无数的机会，方才愿意去反省一下自己，到底内心这股子劲儿，要不要拉出来遛遛，看一个屌丝码农几斤几两，能祸祸到什么地步。 这都扯到孙悟空撒尿的地方了，不过也罢。回到台面上，内心不甘的人很多，出来干的没几个，出来干的哪个不是在忐忑的装逼，当然，装逼无罪，忐忑有理，哈哈。</p> <h3>所以，来谈谈钱:</h3> <ul> <li>Moveha 能提供给你和杭州薪资基本持平的待遇</li> <li>A 轮以后的期权</li> </ul> <p>理想美好，现实残酷，情况就这么个情况，事情就这么个事情，看好了这个项目，团队的 氛围或者看上了男的 CTO 或者 女的 CEO 都没关系，你便是有动力了，接下来得拿点勇气，敢不敢大大方方来一发，这一发，可能屁都不是，可能一柱擎天，但有一点很确定，这一发风风火火的投入，肯定是一个难忘的流汗回忆，一辈子那么长，有点有意思的回忆也未尝不可，所以你看，我已经会扯情怀了，我刚进 Team 时候，只会 Coding，这就是成长。</p> <p>那么，骚年，腐女，还等啥，简历砸我吧：hr@moveha.com。</p> <h3>-----------------这里该放分割线了-----------------</h3> <h5>我们来自何方，去向何处？</h5> <p>Moveha 是一个帮助国际学生远程租房的平台，希望可以帮助国际学生在来美国之前把房子预定下来，也面向所有需要校外租房的美国本土学生群体。此外，Moveha还综合各方面资源，提供了机票预定（StudentUniverse）、接机（LYFT）、家具租赁（cort）、手机卡办理（T-Mobile）、水电网费账号注册（PG&E, Comcast）、一对一定制服务（Premium Service）等多项附加服务，保障留学生来美后能够省去繁文缛节，轻松入住新家。</p> <p>目前，Moveha已经获得30多万美元天使投资，300万人民币海创大赛基金，以及杭州市政府提供的免费办公场地。公司总部位于美国加州硅谷腹地，房源覆盖加州、新泽西、宾夕法尼亚等州，和芝加哥、西雅图等大型城市，正在向全美留学生集中的学校扩张。目前已经和美国100多所大学、几十家房屋中介机构、以及国内几十家留学中介、英语培训学校建立合作关系，正在以疾风劲草之势占据整个留美租房市场，不缺机会，不缺挑战，不缺帅哥，不缺美女，唯独缺个你。</p> <p>技术这块呢，先说下 截至到现在 5 个月 Moveha 的状态：</p> <ul> <li>手写了 5 万行代码</li> <li>1100 次 commit</li> <li>close 400 个 issue</li> <li>发布上线 380 次</li> </ul> <p><img src=\"https://cloud.githubusercontent.com/assets/670360/5714847/5462a7e8-9a83-11e4-93ec-a7291718228e.png\" alt=\"image\"></p> <p><img src=\"https://cloud.githubusercontent.com/assets/670360/5714833/13604a70-9a83-11e4-9881-6b63b589ff6c.png\" alt=\"image\"></p> <p>招聘呢，需要实习生和资深开发工程师。</p> <ul> <li>实习生，懂 HTML/CSS/JAVASCRIPT 就行，热爱编程。</li> <li>资深开发工程师，要玩转 Node.js，就这一个要求吧。</li> </ul> <p>网站现在的技术架构是： Linux + Mongodb + Node.js + Express + Bootstrap，简单吧，简直是多快好省的令人发指，还不用考虑 IE9 以下，能不能来一发，你看着办吧。</p> <p>我们的办公地点在美国加州 Sunnyvale 的 Plug and Play incubator，毗邻 AMD、德州仪器、微软、甲骨文，github 等知名高科技公司。</p> <p>杭州的办公地点在滨江区海创园，毗邻阿里巴巴和网易。</p> <p><img src=\"//dn-cnode.qbox.me/Fm2QnuTL6-DfD68WnIL1aVfdhu1M\" alt=\"untitled1.png\"></p> <h2>所见所闻</h2> <p>以下是一些我在硅谷这两个月的所见所闻（内有妹子），特别特别长，费流量：</p> <h3>狗狗篇</h3> <p>刚来美国住在同事家里，他家的 nemo, 每天早上会跑到我的房间，望向窗外，思考它的 狗生：</p> <p><img src=\"https://cloud.githubusercontent.com/assets/670360/5893776/ec4175fe-a4a5-11e4-970f-a7a039720e77.png\" alt=\"image\"></p> <p><img src=\"https://cloud.githubusercontent.com/assets/670360/5893775/c3354bea-a4a5-11e4-9688-329daf342cae.png\" alt=\"image\"></p> <p><img src=\"https://cloud.githubusercontent.com/assets/670360/5893767/98708cb2-a4a5-11e4-90ee-5471b0ed8118.png\" alt=\"image\"></p> <p>然后会各种骚扰我，求我与它进行拔河比赛：</p> <p><img src=\"https://cloud.githubusercontent.com/assets/670360/5893779/230fc73e-a4a6-11e4-9934-12c69db668e0.png\" alt=\"image\"></p> <p>尤其会对我的手进行亲密接触（妈蛋，老子写代码的手啊）：</p> <p><img src=\"https://cloud.githubusercontent.com/assets/670360/5893782/35accb58-a4a6-11e4-9ea7-050c452c9283.png\" alt=\"image\"> <img src=\"https://cloud.githubusercontent.com/assets/670360/5893784/432ed91a-a4a6-11e4-9771-3a52cebcfe17.png\" alt=\"image\"></p> <h3>超市篇</h3> <p>然后，当地的华人很多，印度人也很多，华人办的超市也不少，一天竟然逛到全是青岛啤酒的地方：</p> <p><img src=\"https://cloud.githubusercontent.com/assets/670360/5893788/6e765a26-a4a6-11e4-87ba-3044b57f3a4c.png\" alt=\"image\"></p> <p>以及老干妈：</p> <p><img src=\"https://cloud.githubusercontent.com/assets/670360/5893791/9d64d75e-a4a6-11e4-8ad4-32b94248ef03.png\" alt=\"image\"></p> <h3>合租篇</h3> <p>后来，同事要出差去地推房源，我就搬到了跟别人合租，住在妹子们的客厅，妹子们是重庆的，贵州的，香港的，广州的，所以是 4 女 1 男的生活，她们都比较小，高中后就过来读书了，现在还没毕业，换算到国内也就是 大二的样子吧：</p> <p><img src=\"https://cloud.githubusercontent.com/assets/670360/5893798/d9634236-a4a6-11e4-975a-a4b26f14d6f9.png\" alt=\"image\"></p> <p>买了个气垫床，凑合着用：</p> <p><img src=\"https://cloud.githubusercontent.com/assets/670360/5893805/0f259950-a4a7-11e4-9238-0fd463e92a89.png\" alt=\"image\"></p> <p>比较爽的是，客厅有 xbox 和大彩电，可以玩 刺客信条和极品飞车，可惜没有人陪我玩 实况，我只好和电脑对战，总是输，这个小区的住户可以免费去专属健身房锻炼，可惜我不习惯室内运动，后来就不再去了：</p> <p><img src=\"https://cloud.githubusercontent.com/assets/670360/5893807/40280f9c-a4a7-11e4-84b4-93170b7dc3c3.png\" alt=\"image\"></p> <p><img src=\"https://cloud.githubusercontent.com/assets/670360/5894036/11380514-a4ae-11e4-93e8-fd8e4a9891fe.png\" alt=\"image\"></p> <h3>啤酒，音乐和代码</h3> <p>我有轻度的酒精依赖，喝了酒，写代码能更兴奋，所以来这里后，我就没断过，天天从超市往家里运酒，但是我自己不能买，必须让同事用他的驾照买，如果店员直接卖给我，他是违法的：</p> <p><img src=\"https://cloud.githubusercontent.com/assets/670360/5893833/d51e52e6-a4a7-11e4-9475-aa93384e0350.png\" alt=\"image\"></p> <p>这是香港妹子推荐我买的，特别特别的苦：</p> <p><img src=\"https://cloud.githubusercontent.com/assets/670360/5893835/eeac2904-a4a7-11e4-95fb-111fe4b292b5.png\" alt=\"image\"></p> <p>这两周赶项目，压力一大，就喝的更快了：</p> <p><img src=\"https://cloud.githubusercontent.com/assets/670360/5893842/32a2bb46-a4a8-11e4-91e3-8706fc911cc7.png\" alt=\"image\"></p> <h3>吃货篇</h3> <p>因为初到这里，吃饭不习惯，特别是孵化器里食堂的沙拉，吃的我很不爽，就先自己做了一段时间：</p> <p><img src=\"https://cloud.githubusercontent.com/assets/670360/5893862/3a3aae9e-a4a9-11e4-9046-7d93ab335091.png\" alt=\"image\"></p> <p><img src=\"https://cloud.githubusercontent.com/assets/670360/5893868/47afe21a-a4a9-11e4-8621-8b6a1fdcea87.png\" alt=\"image\"></p> <p>带来了东北的 萝卜干，泡开了炒熟，当下酒菜很爽：</p> <p><img src=\"https://cloud.githubusercontent.com/assets/670360/5893874/620491a6-a4a9-11e4-974c-394f3cd97295.png\" alt=\"image\"></p> <p>第一次炒宫保鸡丁，像黑暗料理一样：</p> <p><img src=\"https://cloud.githubusercontent.com/assets/670360/5893876/77d5a560-a4a9-11e4-9ad5-9e795a8988e9.png\" alt=\"image\"></p> <p>练过几次后，就做的像模像样了：</p> <p><img src=\"https://cloud.githubusercontent.com/assets/670360/5893882/919dfa06-a4a9-11e4-8368-3fc6e6514360.png\" alt=\"image\"></p> <p>一直吃米饭，胃顶不住了，直到有一天去一个大华广场，看到 三好拉面，就在这儿连续吃一星期，把同事吃的再也不敢来了：</p> <p>臊子面：</p> <p><img src=\"https://cloud.githubusercontent.com/assets/670360/5893884/c827681e-a4a9-11e4-9406-ac836524135c.png\" alt=\"image\"></p> <p>鸡蛋面：</p> <p><img src=\"https://cloud.githubusercontent.com/assets/670360/5893885/d163f29e-a4a9-11e4-8e04-90decaacd75b.png\" alt=\"image\"></p> <p>鸡蛋拌面：</p> <p><img src=\"https://cloud.githubusercontent.com/assets/670360/5893886/e0dbc58a-a4a9-11e4-84a7-86f9ee9e04b4.png\" alt=\"image\"></p> <p>好吧，我在看面单：</p> <p><img src=\"https://cloud.githubusercontent.com/assets/670360/5893891/0003cdfe-a4aa-11e4-9d9f-ae190b471e34.png\" alt=\"image\"></p> <p><img src=\"https://cloud.githubusercontent.com/assets/670360/5893893/0a4af4a4-a4aa-11e4-91b4-32e105959e7f.png\" alt=\"image\"></p> <p>总体说，面做的很地道，就是有点贵，顶不住，室友很能吃辣，就跟她们在家里做火锅吃：</p> <p><img src=\"https://cloud.githubusercontent.com/assets/670360/5893909/50d1c8a8-a4aa-11e4-8876-be2b044464c5.png\" alt=\"image\"></p> <h3>三藩唐人街</h3> <p>这是我住的房子外面</p> <p><img src=\"https://cloud.githubusercontent.com/assets/670360/5893848/92112054-a4a8-11e4-8e81-e34b95fa6a75.png\" alt=\"image\"></p> <p>老美的天的确比较蓝：</p> <p><img src=\"https://cloud.githubusercontent.com/assets/670360/5893851/d8cc0522-a4a8-11e4-8484-fb873bc4980f.png\" alt=\"image\"></p> <p>湾区大桥，铁桥是从前的，正在拆除：</p> <p><img src=\"https://cloud.githubusercontent.com/assets/670360/5893918/8a137bfc-a4aa-11e4-84af-8d237b22f440.png\" alt=\"image\"></p> <p>团队组织去三藩室玩，商业街区感觉很拥挤：</p> <p><img src=\"https://cloud.githubusercontent.com/assets/670360/5893854/f69ae816-a4a8-11e4-9f86-beed81356b43.png\" alt=\"image\"></p> <p>三藩市十五大街，这里是个广场，很多人排队滑冰：</p> <p><img src=\"https://cloud.githubusercontent.com/assets/670360/5893930/3f086fd6-a4ab-11e4-8b51-c1fb0ee0c640.png\" alt=\"image\"></p> <p>海鸥很贱，胆子超级大，可以从鸽子嘴里直接抢食：</p> <p><img src=\"https://cloud.githubusercontent.com/assets/670360/5893933/60d62fae-a4ab-11e4-9c4c-df5b1f8de4ca.png\" alt=\"image\"></p> <p><img src=\"https://cloud.githubusercontent.com/assets/670360/5893922/c46d0912-a4aa-11e4-93c0-782ef2ad58e1.png\" alt=\"image\"></p> <p>不得不提的是，苹果商店：</p> <p><img src=\"https://cloud.githubusercontent.com/assets/670360/5893927/f8cfca14-a4aa-11e4-8dac-fe2190966dba.png\" alt=\"image\"></p> <p>这算是人非常非常少的时候，大部分时候都要在门口排队，华人在这里买东西是最豪爽的，提货就走。</p> <p>至于屌丝如我，以一种最邋遢的方式（期间时差刚导过来）在 Meicy House 合影，希望沾一沾 圣诞老人的福气：</p> <p><img src=\"https://cloud.githubusercontent.com/assets/670360/5893939/96c62510-a4ab-11e4-8416-c49c851554fd.png\" alt=\"image\"></p> <p>为了证明码农也有干净的时候，特意拍了一组照片（爆照了，实在是心肝颤颤，招人容易么我）：</p> <p><img src=\"https://cloud.githubusercontent.com/assets/670360/5893949/e57710de-a4ab-11e4-8e22-9f8936547247.png\" alt=\"image\"></p> <p>总之这个帖子是各种乱入吧，千万别火了，我只是招个人而已，不想出名。</p> <p>在三藩市去了唐人街，也就是拍 《盗梦空间》 的地方，结果我只顾看，没有拍下陡峭的破路，只拍了边边角角： <img src=\"https://cloud.githubusercontent.com/assets/670360/5893961/4766fda4-a4ac-11e4-9cee-1ec8d25f82e6.png\" alt=\"image\"></p> <p><img src=\"https://cloud.githubusercontent.com/assets/670360/5893964/53e8e8d0-a4ac-11e4-80b4-3289b09bc13d.png\" alt=\"image\"></p> <p>美女老板领着我一路步行到海边，期间一路有唐人/意大利分解街道，也有脱衣舞舞厅，快到海边的时候看到这几朵树，很别致：</p> <p><img src=\"https://cloud.githubusercontent.com/assets/670360/5893969/8ce32f2e-a4ac-11e4-8e54-12cefed23c92.png\" alt=\"image\"></p> <p>然后走到了 7 号码头，一只帆船映入眼帘，心情大好：</p> <p><img src=\"https://cloud.githubusercontent.com/assets/670360/5893973/a4bc9e0a-a4ac-11e4-920f-1123592b8f09.png\" alt=\"image\"></p> <p>又看到了贱贱的海鸥：</p> <p><img src=\"https://cloud.githubusercontent.com/assets/670360/5893974/b0eec91e-a4ac-11e4-80cb-681e0e42fbb9.png\" alt=\"image\"></p> <p>在七号码头闻了一会海风腥味，回头正好看到落日西下，尖塔余晖，前面一对远去的情侣，很有意境：</p> <p><img src=\"https://cloud.githubusercontent.com/assets/670360/5893982/e32fa128-a4ac-11e4-9b2b-46e7c1eee7f2.png\" alt=\"image\"></p> <p>两个玩滑板的小女孩也求给她们拍合影，作为一个码农，遇到这种事情，必须说，老板还是你来吧…概叹年轻真好：</p> <p><img src=\"https://cloud.githubusercontent.com/assets/670360/5893986/03b75e40-a4ad-11e4-83f7-8e0047485448.png\" alt=\"image\"></p> <p>在一家店里看到很多冰箱贴，没买很遗憾：</p> <p><img src=\"https://cloud.githubusercontent.com/assets/670360/5893994/4e00430e-a4ad-11e4-8bc1-cc35b5047291.png\" alt=\"image\"></p> <p>跨年的时候，再次跟着几个小姑娘，跑到三藩看烟花，穿的太薄了，快冻死了：</p> <p><img src=\"https://cloud.githubusercontent.com/assets/670360/5894011/8941c65e-a4ad-11e4-88c4-06acff33555b.png\" alt=\"image\"></p> <p><img src=\"https://cloud.githubusercontent.com/assets/670360/5894012/9655aa36-a4ad-11e4-8992-93f9f776f462.png\" alt=\"image\"></p> <p>心里想想，老外挺省的，烟花不弄那么奢侈的，如果跟 08 奥运会一样，那海边看烟花的人都要彻底醉了。</p> <p><img src=\"https://cloud.githubusercontent.com/assets/670360/5894015/c2217cc6-a4ad-11e4-8440-c7d1d22d727f.png\" alt=\"image\"></p> <p><img src=\"https://cloud.githubusercontent.com/assets/670360/5894021/cb87ea02-a4ad-11e4-96d6-869a78d26ba5.png\" alt=\"image\"></p> <h3>硅谷文化</h3> <p>这个话题太大了，期间一个周末跟实习生逛他母校 - 卡耐基梅隆大学加州分校，其实就是大学很看重硅谷这个公司氛围，就特意把计算机专业的一些学生安排了这个两栋楼的分校，这两栋楼坐落在 NASA 里面，对，就是那个 NASA，守卫森严，这里是联邦领地，不归加州管理的：</p> <p><img src=\"https://cloud.githubusercontent.com/assets/670360/5894055/c59ac46a-a4ae-11e4-8cdf-bf72bd4f9d88.png\" alt=\"image\"></p> <h3>娱乐</h3> <p>想唱 KTV 的最好是在国内唱个够，这边的 KTV 系统真心落后，触屏不灵敏，歌曲少，跟我大中华根本不能比：</p> <p><img src=\"https://cloud.githubusercontent.com/assets/670360/5894058/fbaf9544-a4ae-11e4-8e32-3558253f4ae6.png\" alt=\"image\"></p> </div>\",\ntitle: \"【美国加州】（临近斯坦福） Moveha 创业团队招聘 Node.js 工程师\",\nlast_reply_at: \"2016-11-30T15:10:13.600Z\",\ngood: true,\ntop: false,\nreply_count: 64,\nvisit_count: 11493,\ncreate_at: \"2014-12-10T08:02:08.768Z\",\nauthor: - {\nloginname: \"huanglong\",\navatar_url: \"https://avatars.githubusercontent.com/u/670360?v=3&s=120\"\n}\n},\n- {\nid: \"583ecf43254727447987cad7\",\nauthor_id: \"551df949cf52388732ad6e41\",\ntab: \"ask\",\ncontent: \"<div class=\"markdown-text\"><p>有没有库能定义个模型然后生成建表语句？ 不需要连接数据库， 我想做一个快速生成建表语句的工具。 有没有这方面的库推荐一下？</p> </div>\",\ntitle: \"有没有库能定义个模型然后生成建表语句\",\nlast_reply_at: \"2016-11-30T14:12:49.990Z\",\ngood: false,\ntop: false,\nreply_count: 1,\nvisit_count: 107,\ncreate_at: \"2016-11-30T13:08:19.457Z\",\nauthor: - {\nloginname: \"ystyle\",\navatar_url: \"https://avatars.githubusercontent.com/u/4478635?v=3&s=120\"\n}\n},\n- {\nid: \"583ed861efa98d907a52824c\",\nauthor_id: \"572f3e6599e6038058b6a6f1\",\ntab: \"job\",\ncontent: \"<div class=\"markdown-text\"><p>###<strong>郑州珑凌科技，郑州最优秀的纯互联网公司之一，产品驱动、技术驱动。</strong></p> <p>功能 /性能测试大牛，大数据 leader ， Android ， O-C/Go/PHP/nodejs ， C/C++（内核、网络驱动、协议栈、算路、界面开发等方向）类比百度 T5 及以上 最佳</p> <p>技术帝看这里： mac 电脑、机械键盘、各种资料用书，想要打个报告！</p> <p>健身帝看这里：台球、乒乓、动感单车、淋浴间、洗衣机</p> <p>养生派看这里：中央空调、空气净化器、净水器、微波炉、电冰箱</p> <p>懒觉侠看这里：上班不打卡、弹性工作时间、带薪年假、 x-box 、 htc vr</p> <p>宿舍条件这里：免费、可做饭、有阳台、上下班方便</p> <p>其他福利这里：五险一金、节日福利、生日福利、结婚生子礼金、公司营收分红、年终奖、免费法律咨询、伯乐奖</p> <p>邮箱： job#<a href=\"http://lonlife.cn\">lonlife.cn</a> （ pdf ，姓名+岗位+期望薪酬+cnodejs ） QQ ： 1348284898</p> <p>地址：河南郑州金水区 南阳路农业路</p> <p>实习生或应届生请关注我司官网相关校招渠道，谢谢大家！</p> </div>\",\ntitle: \"[郑州招聘] 大数据 leader，测试， Android ， C/C++（内核、网络驱动、协议栈、算路等方向） Go/PHP/nodejs ,类比百度 T5 /T6 及以上。欢迎各位老乡年底回家！！\",\nlast_reply_at: \"2016-11-30T13:47:13.570Z\",\ngood: false,\ntop: false,\nreply_count: 0,\nvisit_count: 78,\ncreate_at: \"2016-11-30T13:47:13.570Z\",\nauthor: - {\nloginname: \"lycolin\",\navatar_url: \"https://avatars.githubusercontent.com/u/18087374?v=3&s=120\"\n}\n}\n]\n}\nFormat online"}